[{"id":"/Guide/Getting%20Started/Installing-Gaea.html","title":"Installing Gaea","text":"Software Requirements Microsoft .NET Framework 4.8 or later. Microsoft Visual C++ 2017 Runtime. If either is not detected, the installer will try to download them automatically. Normal Install Installing Gaea is a simple process. Depending on your installation location, you may need administrative privileges. Download the latest version. Run the downloaded .exe file. By default, Gaea installs to C:\\Program Files\\QuadSpinner\\Gaea but can be directed to any other folder. For security purposes, we recommend the C:\\Program Files folder. Once setup is complete, Gaea will launch. Follow the on-screen questions to set up your default preferences. The Gaea central project repository and build stacks are placed in Documents\\Gaea\\ by default. However, you can change this folder to any other location through installer, or at any later time via the Preferences. Administrative Install To run the installer silently: Gaea-1.0.29.exe /s To choose the install path: Gaea-1.0.29.exe /S /D=C:\\Gaea Manual Mass Deployment For mass deployment, the following may be an easier process as Gaea is now fully portable. Install Gaea to a temporary folder on any machine. Copy the license key to the install folder. Now you can create a zip of the folder or copy it however you prefer to as many computers as you like. These installations will need be patched or upgraded in the same way. Floating Server This feature is currently in development and may not be available until version 1.4. Please contact technical support for an interim alternative. Clean Installation If you were using our older EXE installers, or have encountered an issue in a new build, we recommend a clean installation. Download the full installer from the link above, and during installation, check the option for &quot;Clean Installation. Branches Production Ready Production Ready builds are stable, and thoroughly tested both by the QA team and regular users. They are released once or twice every month. Bleeding Edge features are rolled into these builds slowly, once they undergo thorough testing. Bleeding Edge Bleeding Edge builds are released once or several times per cycle. They are mostly stable, but not fully ready for production. You get to try new features as they're added, and provide feedback very early so we can modify them to your satisfaction. Install Side-by-side Both install to different locations, and do not share settings or registry entries. This gives you the flexibility to try new features without endangering your work projects. Version Scheme A version such as 1.0.30.5 is comprised of four elements Major . Minor . Build . Revision: Major Only changed when a new, payable version is released. This happens perhaps once every two years. Minor Updated when a major set of features are added. This usually happens a few times a year. Build Updated every time there is a new release in the Production Ready branch. This happens once or twice a month. Revision Updated every time a new build is released in theBleeding Edge channel. This can happen once, or sometimes several times, in a week. Revision is incremented also when a Bleeding Edge build is rolled into the Production Ready branch.  The Revision element was reset with the release of Gaea 1.0.28 to avoid confusion with the frequent Bleeding Edge updates. "},{"id":"/Guide/Getting%20Started/Your-First-Terrain.html","title":"Your first terrain","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/1A1xXfTlKqM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Guide/Getting%20Started/Common-issues.html","title":"Common Issues","text":"Startup Issues If Gaea fails to start Ensure Gaea.exe and Archon.exe have firewall permissions for local TCP/IP communication. Install the latest CPU and GPU drivers. Ensure you have at least 10GB of free space in your Windows' temp directory, as well as the cache folder set in Gaea Preferences. If none of these work, run Using Watson for Troubleshooting and file a ticket. Our support team will help you figure out the problem. "},{"id":"/Guide/Interface/Getting-around.html","title":"Getting around","text":" The Gaea interface is streamlined and minimal. All essential tools are available right within the main interface. Viewport  The viewports help you visualize your terrain components as you build the graph. There are two viewports, the 3D viewport, and the 2D viewport. The 2D viewport also doubles as an editor surface when using nodes such as Draw, Islands, Mask, etc. A viewport toolbar gives you access to all the options for both the viewports and the lighting for the terrain. For further details, see Viewport. Graph Surface  The Graph is the core of Gaea. This is where your take nodes from the Toolbox and implement them on the Graph surface. The toolbox menu allows you change the Toolbox's configuration, such as full size or expert mode. The Graph can be split into multiple tabs, which are shown above the nodes. The tabs also share space with key graph tools on the far right such as Pinned nodes, the Baking menu, and more. For further details, see Infinity Graph. Properties Panel  The Properties panel lets you modify the nodes on the Graph surface. When you select a node, the properties for it will be visible here. The Post Process Stack is available at the bottom of the Properties panel. These adjustment options can help you skip having to create additional nodes. Between the two is the Apply / Lock button. If a node takes a long time to process and has been marked as &quot;Heavy&quot;, or you have toggled Auto Apply, changes to the node properties are not applied until you click Apply. For further details, see Properties. Toolbars  Beyond the graph and viewport toolbars, there are other toolbars across the interface. At the top, the main toolbar is shared with the title bar to give you maximum workspace area. It gives you access to key file commands and lets you change the resolution and quality of the viewport. The main menu is accessed by clicking the &quot;Gaea&quot; title. On the far right, you can change the scale of the UI. You can also see the version and edition of Gaea you are using. In the bottom right corner of the interface, there are a few advanced options for caching, and memory optimization. For further details, see Baking and Caching. Build Tab  Gaea needs to build the terrain to get you the final quality version of the terrain you preview while working in the main interface. The Build Manager tab allows you to configure the terrain build and use different options to initiate the build. At the bottom, you can select the build destination and fire off the build using the Build Swarm. For further information, see Build Manager. Below the Build Manager controls is the Terrain Definition. This is where you can control the arbitrary scale of your terrain. For further information, see Terrain Scale. "},{"id":"/Guide/Interface/Startup.html","title":"Startup Screen","text":"The Startup Screen is your main entry point into Gaea. Project Screen On the right side, you have all the commands you need to get started. On the left side, you can access the most recently opened projects. Load License If your installation is not authorized with a license key, you will find a &quot;Enter License Key&quot; button under the Gaea logo. You can also access it from the About menu. Without a license, Gaea will revert to the Community Edition with resolution restrictions. Commands  Command  Description  -----------------------  --------------------------------------------------------------------------------------   New Project  Creates a new project using the default template. Right-click for alternate templates.   Open Project Open an existing TOR project file.   Sculpt Existing Terrain  See Erosion Studio options. Further details below.   Open Quickstart  Browse through the quickstart and example files collection that ships with Gaea.   Recent Files List of recently opened files. Right-click for additional options.   New Version  When a new version is available, Open Modes When opening a Gaea file, you can choose one of the following modes either in the file dialog, or by right-clicking the Recent Files list in the Startup Screen.  Open Mode  Description  -----------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   Normal Open the file normally.  Force low resolution Force the file to use 512 x 512 preview resolution. This is useful when your file is saved with a high resolution preview setting and you do not wish to wait for the high resolution previews to build. Session cache is ignored in this mode.  Open and suspend engine  The file is opened at the saved resolution, and session caches are also loaded. However, the Suspend Engine option in the @Graph is turned on so the nodes are not processed until the engine is resumed manually. This is useful for making quick adjustments to a file without waiting for previews to be built.  Menu Commands The menu in the top right gives you access to additional options.  Menu Command Description  -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   Preferences  Opens the Preferences dialog.   Disable 3D Viewport  This option lets you disable the 3D viewport and replaces it with the 2D Viewport. This can be helpful for diagnosing problems, working in only the 2D view, or quickly changing the settings in an existing file for building.   Help Takes you to this documentation.   About  Displays version and other information for the installed version of Gaea.  Exit Exits Gaea. Erosion Studio  Project Commands  Description   ----------------  -------------------------------------------------------------------------------------------------------------------   New Sculpt  Import an existing heightfield into Erosion Studio to begin a new sculpting project.  Open Project  Open a previously saved sculpting project to resume work, or reapply the procedural sculpt on an updated heightmap.  Version Updates Clicking the New Version command lets you see the release notes and changelog for any new versions that are released. You can review the notes and choose to upgrade.  When possible, Gaea will try to use a patch upgrade to reduce the download size to avoid using unnecessary bandwidth on your internet connection. Quickstarts The Quickstarts browser lets you open examples and technique demonstration projects that ship with Gaea. "},{"id":"/Guide/Interface/Viewport.html","title":"Viewport","text":"The viewport is your primary method of examining and exploring terrains. It provides a heavy duty 3D view of your terrain at different resolutions. Gaea’s viewport harnesses the powerful Unity engine, and has been deeply customized to fit advanced terrain systems. The viewport can process an 8.3 million polygon terrain in milliseconds, allowing you to work at high resolution. 3D Viewport  Alt and Mouse Left to drag. Can be customized in Preferences. W,A,S,D for directional movement. Q and E for up and down. Mouse Wheel for zooming. Mouse Middle for panning. Space to re-center on the terrain.  When using a stylus, you may need to adjust the sensitivity for panning, zooming, and other movements. You can change the sensitivity in Preferences. The toolbar on the side has the following commands: 3D Viewport First Person mode (temporarily unavailable) Toggle 2D Viewport Lighting and Viewport Settings 3D Shading Autolevel / Simple Mode Equalized Mode (only visible with 2D maps) Viewport Settings The viewport settings let you modify the look of your viewport. For details of the lighting options, see Light. The Colors section lets you modify the color gradients used for rendering the heightfields/terrain and data/mask outputs. You can optionally autolevel or reverse the terrain gradient. The Water section lets you use the optional water surface. This is a superficial element and does not affect the actual terrain or any nodes. First Person View The First Person view has been temporarily removed from Gaea. Expect it to come back soon. 2D Viewport The 2D viewport provides flat previews with pixel-to-pixel accuracy. In many situations, especially when dealing with masks, you can see visual data that may not be readily visible in the 3D viewport. The 2D view is available directly in the main window alongside the 3D view when activated from the main toolbar in the top left. It can also be opened as a separate window through the Graph Toolbar in the bottom right. Mouse Wheel for zooming. Mouse Middle for panning. 2D Mode The 2D mode lets you see an orthographic view of the terrain. Additionally, you can right-click the viewport to select secondary outputs if a node provides them. For example, you can see the Erosion node's wear or flow output without having to plug it into another node.  By default, the secondary output will be overlaid on the terrain. You can turn off the 3D Shading in the toolbar to see the mask by itself. Plain / Autolevel View  This mode shows a basic heightfield with minimal lighting. 2D maps are shown in grayscale, with black representing lower areas and white representing higher areas. This is a great way to examine your terrain from an unbiased perspective, especially when dealing with 2D data; such as data map outputs, secondary output from erosion, and so on.  You can change the gradient representing the mask color gradient in the viewport settings. Equalized Mode  If the 2D view is too difficult to see, the Equalized mode emphasizes the image to help you see better. This is particularly helpful when working with delicate masks and other 2D maps. The equalization process is superficial and does not affect the actual terrain. The mask color gradient is even more useful in this context. "},{"id":"/Guide/Interface/Build-Manager.html","title":"Build Manager","text":"The Build Manager gives you easy access to crucial output preferences. It is accessed by clicking the Build button in the top toolbar. Mark for export The node grid shows you all the nodes marked for export. You can temporarily toggle a node by clicking the checkbox next to the node. This does not affect the build, only the output. This can be useful when you just want to see a few specific outputs, or you need to go back to rebuild an older project for selective output. When a node has multiple outputs, such as the Erosion and Breaker nodes in this example, you can individually toggle which ports should be saved as files. For details on how to use the Build Manager, see Build and Export. "},{"id":"/Guide/Interface/Preferences.html","title":"Preferences","text":"The Preferences dialog gives you easy access to common preferences. It can be accessed from the Gaea Main menu. You can also access it from the startup dialog. Workspace Toolbox: This option allows you to set the look of the toolbox buttons. Icon option shows the toolbox buttons as icons. Labels option shows labels in the toolbox, along with small icons. You can select the Hide option to hide the toolbox. Nodes: Lets you select the node size in Graph. Three options are available: Small, Medium, and Large. Connections: You can select from four types of connections: Efficient, Straight, Bezier, and Circuit. Colors: This option lets you choose the color scheme for the UI. You can choose between Normal and Bright. Optimize visuals for older hardware: Checking this option will reduce the visual effects. It will not impact functionality. This option will disable dropshadow effects in the UI, slider hover preview, and other UI details. This option requires Gaea to restart. Show Favorites in Graph: You can check this option to show favorites in Graph. Ask before deleting node: Checking this option will ask you before deleting each node. Unchecking this option will delete the node without your confirmation. Viewport Rotate: This option lets you select the key combination to use to navigate in the viewport. You can choose from: Alt + MouseR, Alt + MouseL, MouseR, MouseL. Quality: You can choose the Viewport quality from: Low, Medium, High, and Ultra. Viewport Style: Viewport style options affect Graph workflow only. Select Embedded to keep the viewport attached as part of the main window. Select Floating to detach the viewport from main UI and keep it as a separate window. Select Floating Top Most to keep the viewport floating and on top of other windows. Invert Y-axis: This option lets you invert the Y-axis of the viewport. Build Gaea Documents Location: You can set the location where your Gaea documents are stored. Central Build Repository: This option lets you set the Gaea Build Folder. Cache Location: You can set the Cache location. Others Autosave when performing major operations: This option will autosave your files when performing major operations. You can access your autosave folder at C:\\Users\\[YOU]\\AppData\\Roaming\\QuadSpinner\\Gaea\\Autosave. Keep autosaves beyond 90 days: Gaea cleans up the autosave folder for files which are older than 90 days. Check this option to keep the autosaved files beyond 90 days. Check for updates on startup: Checking this option will check for updates each time Gaea is started. Send anonymous usage data and hardware statistics: Gaea collects anonymous usage statistics and hardware data that we use to improve the software. This information is collected anonymously once a month, and does not contain any personally identifiable details. "},{"id":"/Guide/Interface/Keyboard.html","title":"Keyboard Shortcuts","text":"<div class=\"shortcuts\"> File Commands  Command Shortcut   :----------------  ------------------:   New Ctrl + N   Open  Ctrl + O   Save  Ctrl + S   Save incremental  Ctrl + Shift + S  Graph Commands  Command Shortcut   :--------------------------  ------------------:   Refresh node  F5   Bypass node B  Pin node preview  F  Pin node for color preview  G  Mark node for save  F3   Delete node Del  Rename node F2   Build terrain Ctrl + Shift + B   MultiMix nodes  F8   Duplicate node  Ctrl + D   Quick search nodes  TAB  Zoom graph to 100%  Ctrl + 1   Zoom graph to fit all Ctrl + 0  </div> "},{"id":"/Guide/Graph/Graph.html","title":"Infinity Graph","text":"The Infinity Graph Gaea's advanced graph based workflow is the key to creating sophisticated terrains. This open-ended workflow gives you the flexibility to create almost any kind of results that you want.  If you have not used node based workflows before, it may look intimidating but Gaea provides a very artist friendly workflow where you are not required to create complex graphs to get good results. Try following some of the simple exercises like Your first terrain or the @techniques section, and you will see that the graph is quite easy to use. Convenience Features further enhance the way you create and manage nodes, making it easy to try different things. The Infinity Graph allows you to split your terrain graph across multiple tabs using Portals and Chokepoints.    "},{"id":"/Guide/Graph/Nodes.html","title":"Node Workflow","text":"Node Properties Conveniences Flux Markers When you move the slider, the last 3 positions are marked with little dots in decreasing opacity levels. These handy little guides can be helpful when exploring settings. They reset every time you unselect that node. Revert Node and Save State Unlike undo, which needs to be done per setting, the Revert node feature is a time saving facility added to all nodes. Whenever you select a node, the &quot;state&quot; of that node is saved to memory. If you change several settings and decide you want to go back to what you had, you can just go to the Node Properties menu and select &quot;Revert Node&quot;. This will revert the node back to the saved state. Be careful, when you select another node, the state of the previous node will be forgotten. But if you want to preserve the state for longer periods of time, you can manually select &quot;Save State&quot; in the same menu for any node. Now that node state is saved in memory until you close the file. You can go back and load the saved state anytime. Copy/Paste Settings You can right-click a node to copy its settings. Then right-click another node of the same type and click Paste Settings to apply those settings to that node. Build Conveniences Get Name from Parent Sometimes you have many outputs and you have to spend time naming them properly. Then you need to add auxiliary outputs for those such as normals or data maps, and it can become a giant chore to name them all. The new Get name from parent command in the node context menu can get the name of the parent and add the node's own name as a suffix. For example, Slope becomes &quot;Erosion_Slope&quot;. Export from Cache Gaea can preview up to 4K. Often you will work in 2K for high definition previews, and want to save out the entire exportable node set at 2K for testing in your DCC application or game engine before firing off a full build. To do this, you run the Build Manager which rebuilds the whole world. But you already have the world built at 2K from your preview! When your preview resolution and the export resolution are the same, the Build Manager will ask you if you wish to just save the preview cache instead. This will save you time from having to rebuild an already built terrain. "},{"id":"/Guide/Graph/Toolbox.html","title":"Toolbox","text":"<div class=\"row\"> <div class=\"col-lg-4\"> </div> <div class=\"col-lg-8\"> The handy Toolbox sits inside the graph, giving you quick drag-drop access to all nodes. Alternatively, you can use the shortcut TAB while in the graph to quickly access the search function, which appears as a popup next to your mouse cursor. Using the Toolbox You can drag and drop a node from the toolbox to your Graph surface. If you drop it on a node, it will automatically connect itself to that node's output. See Convenience Features for more details on how to use the toolbox convenience features. Modes, Toolbox Placement, and other options are available from the menu in the top right corner of the toolbox. </div> </div> Search  When you press Tab when the Graph surface is focused, or if you start typing while the context menu for the Graph is open, the Search feature will present itself. Search also shows up if you drag a connection from a port, but drop it in empty space, and then start typing when the node creation menu appears. By default, it shows the last few nodes that were used. If you start typing, it will give you a list of nodes that match your search. If you click a search result, the node will be created where your cursor is. If a node is a selected, then you press Tab, and then press a shortcut, or click a node, the desired node will be created and connected (Primary Out to Primary In) to the selected node. Shortcuts: ENTER creates the first (or selected) node. Ctrl + 1 through 9 create the subsequent.  Entering \\ into the search field will bring up a list of available portals. This is reserved for connecting nodes rather than creating it. Recent Recently used nodes will show up separately in the Search popup if you clear the search text, giving you quicker access to frequently used nodes without having to explicitly set them as favorites. The Recent nodes list is maintained per-session. It will be emptied when you exit Gaea. Modes  Mode  Description   ------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   Favorite nodes appear a bit brighter than the other nodes. To add or remove a node from favorites, right-click on the tool in the Toolbox and check Show in favorites. When you toggle the small switch at the top of the toolbox, only your most used nodes are shown. To see how these nodes are chosen, see Predictive System. This option is meant to be used frequently.   When Expert Mode is turned on, the section dividers are removed allowing you more screen space for nodes. This mode is more useful when used in conjunction with the Most Used option.  Toolbox Placement You can choose to have the toolbox be placed in different positions. You can change this setting as frequently as you like from the toolbox menu. <div class=\"row\"> <div class=\"col-lg-4\"> Full </div> <div class=\"col-lg-4\"> Bottom </div> <div class=\"col-lg-4\"> Top </div> </div>  The toolbox can also be collapsed when not required. "},{"id":"/Guide/Graph/Properties.html","title":"Properties","text":" Every node exposes a set of properties or settings that you can modify to change the effect that node has on the terrain. When you select a node, the settings become available in the Properties panel in the right side of the interface. When you change a property, the effect is immediately applied and made visible in the viewport - except when dealing with Heavy Nodes (see below). Most nodes have a limited type of properties: Integer: such as 1, 2, 3, 4, etc. They usually define quantity or a finite value like angle. Decimals: such as 0.1, 0.256, 0.4885, etc. They usually define the strength or amount of a certain setting. In most cases, small changes can be quite powerful. Toggle: They usually allow you to turn a feature on or off. Choices: These take the form of a dropdown where you can select one of many options. Color: They allow you to choose a color for the color production nodes. File: They allow you to choose a file from your computer. Sliders with unmodified (default) values are shown with slightly muted colors. This can be controlled through Preferences. Some nodes may have special controls specific to them.  One of the easiest ways to learn about a node's properties is to experiment, changing them to different values across the range to see the effect they have.  If a setting says something like &quot;Iteration&quot;, &quot;Strength&quot;, &quot;Cycles&quot;, or &quot;Amount&quot;, be cautious. High values may take longer to process. Modifying Values For properties that allow numeric entry (Integer or Decimals), you can right-click the property and enter a number. For values shown as percentages, you can enter a value in meters and Gaea will convert it to the appropriate percentage or decimal value proportionate to the metric value in relation to the Terrain Definition set in the Build tab. See Terrain Scale for more information on that topic. Microincrements The Microincrements panel is available when you right-click an Integer or Decimals property. With the Microincrements panel, you can achieve much higher precision in entering values.   Command  Description   --------------  -------------------------------------------   Halve  Halve the current value.   Double  Double the current value.   Minimum  Use the lowest allowed value.   Decrease Large  Decrease by a large value. (ex: 10 in 100%)   Decrease Small  Decrease by a small value. (ex: 1 in 100%)   Reset  Reset to the original / default value.   Increase Large  Increase by a large value. (ex: 10 in 100%)   Increase Small  Increase by a small value. (ex: 1 in 100%)   Maximum  Use the highest allowed value.  Seed Reset Seed Reset is a minor enhancement in the Microincrements UI. It sets the “Default” seed value to whatever the random value is when the node is created. So if you play around for a while and want to go back to the original seed, you can simply reset the Seed. Flux Markers  Flux markers are small dots that represent the last 3 values chosen on the slider previously. They appear when you hover over the slider. Heavy Nodes We have classified some nodes, such as Erosion, Fluvial, etc., as &quot;Heavy&quot; Nodes — meaning, they can take a long time to process and sometimes cannot be cancelled mid-process. Updating multiple settings on such a node can slow down or even freeze up the application. When you modify a Heavy Node, it will not update automatically. It will instead show an Apply button, which you can click when you have made your changes. If you move away from the node, or select another node, changes will be applied automatically, so you won’t lose any modifications. The Apply button has an Auto Apply toggle button next to it. When you turn on Auto Apply, that particular node will update automatically. Alternatively, you can toggle the Auto Apply for any node via the properties menu. If a node is heavy to process even though it is not marked as such, you can toggle off the Auto Apply. Or if a heavy node is performing quickly for you, then you can toggle on the Auto Apply. Post Processing The Post Process options sits right under the Properties and provides quick access to common functions. See Post Process Stack. Properties Menu The node properties menu provides access to additional functionality.   Command  Description  -----------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   Reset node  Reset all properties in the node to their default  Toggle Auto-Apply  Toggle automatic reprocessing of the node when values are updated. See the Heavy Nodes section above.   Revert Node  Revert the values back to the state they were when you selected the node. This &quot;state&quot; resets every time you go away from the node. It is helpful to undo any accidental or experimental changes you may have made to the node after coming back to it from another node.   Save/Load State  Save the state of the node to be recalled later using the Load command. This is preserved in the session only and resets when you close Gaea or go to a different file.  Copy/Paste Settings  Copy and paste settings to and from nodes of the same type.  Expose Node  Expose properties of the node for automation. See Automating Gaea.  Show Exposed Properties  Show a unified properties panel with exposed properties across all nodes. This is useful while working with exposed properties for Automating Gaea.  Create Preset  Save current settings as a preset file.  Import Presets  Import presets for this node from file.  Presets  Apply any existing presets for this node. "},{"id":"/Guide/Graph/Conveniences.html","title":"Convenience Features","text":"Quality of life for the user is the baseline for all we do. Gaea features a large array of unobtrusive (and sometimes even hidden) features that can go a long way towards making your workflow more efficient. Node Conveniences Drop Create All graph applications require you to drop the node, connect it manually, and then organize as needed. Gaea does that for you! Just drop the node on another node and they'll be connected and auto-organized. Dragging a node from the Toolbox and dropping it on an existing node will automatically connect it to that node's primary output. If another node already exists, the new node will be automatically organized for you. Interject Node Drop Interject If you hold Shift and drop a node on an existing node, the new node will interject itself between the node's all outgoing primary output connections. Drag Interject If you hold Shift then drag an independent node (not connected to any other node) over a connection and release the mouse, the node will be interject itself between the two nodes of the existing connections. Interject Portal via Menu Interject Node via Menu Out to Out Connection When you drag an output connection to another output connection, a Combine node is created with the two ports serving as the inputs for the Combine node. Quick Create Rather than setting up a node and then connecting it, you can drag a connection into empty space and use the quick create menu. You can click on a particular node name from the quick create menu, or you can type in a node name which will show the list of matching nodes. Selecting a node from this list connects to it. The Quick Create menu can also show suggestions based on your previous patterns. See below for further details on the Search and Predictive features. MultiMix Select two or more nodes and click the MultiMix button. Alternatively, you can press F8. This will instantly create a sequence of Combine nodes to mix the selected nodes together. For more detailed control, you can select two at a time and MultiMix the results. Auto Layout Even the most complicated graphs can be automatically organized. Just press F4 in the graph. Pressing F4 once will layout the graph in a linear pattern. Pressing F4 again lays out the graph in a waterfall pattern. In the waterfall pattern, Gaea will intelligently try to figure out the junctions in the graph and stagger the subsequence nodes accordingly. Node Bookmarks "},{"id":"/Guide/Graph/Portals.html","title":"Portals and Chokepoints","text":"Portals The portal node is a unique concept in graph-based applications. Like a &quot;wormhole&quot;, portals allow you to connect nodes across vast gaps (or short ones) without visible connections. They not only improve your quality of life, but also dramatically change how you think of and use graphs. When using the Infinity Graph, Portals can be used to connect nodes across different graphs. Any output port in a node can be converted to a portal. You can create a portal in two ways: Drag Out a connection. In the menu that shows up, select Make Portal. Select one or more existing connections and press Ctrl + P to convert the connections into portal connections. Once a portal is created, a small tab with the port's name will be visible next to the node. You can connect to a portal in multiple ways: Drag and connect to a portal like you would connect nodes normally. It will be converted to an invisible connection. Drag Out a connection and you will be presented with a list of available portals organized by graphs. Select a portal to connect.  Drag Out a connection and type \\ when the menu shows up. This will present you with a searchable list of all available portals. Once a portal is connected, a tab showing the name of the portal will be visible on the target node's input port. The color of the tab represents the node type of the portal. You can rename the portal node to change the name displayed in the portal tab. To disconnect a portal from a target node: Ctrl + right-click the node. You can select the port you wish to disconnect from the portal. To convert the portal back to a normal node: Drag Out a connection from the portal and select Remove Portal. Any connections to other nodes in the same graph will be converted to a normal connection. Connections to other graphs will be deleted. Chokepoint The Chokepoint node is a special node whose sole purpose is to help avoid re-connecting many nodes, while adding no memory overhead. Often a graph ends up with natural chokepoints - a single node that is referenced by several other nodes. If at a later point you want to modify that important node, you would need to reconnect all the connections. This can be awkward, time consuming, and dangerous in some situations. In this example, the second Erosion node is the chokepoint. It feeds several other nodes, while being a critical junction in the terrain's creation process. It is more or less the &quot;last&quot; node in the terrain creation.  The easy solution is to interject a Chokepoint node onto the important node. You can hold Shift while drag-dropping a Chokepoint on to the Erosion node to interject it and have Gaea reroute all connections. See Node Workflow for more information.  Now everything is routed through the Chokepoint, allowing you to experiment with the Erosion node later, and only reroute a single connection when needed. The Chokepoint can be further organized by making its output a portal. You can select all the outgoing connections and press Ctrl + P to turn them into portal connections. This is especially useful when working with multiple graphs.  "},{"id":"/Guide/Graph/Predictive.html","title":"Predictive System","text":"Learning and Predictive Services Gaea's internal (and fully local) Predictive Service learns your node creation and connection patterns as you work. When the Quick Create menu shows up (see above), it will attempt to detect if any patterns exist and try to suggest nodes that you are likely to use. For example, if you find yourself connecting Autolevel to the Flow output of the Erosion node, dragging a connection out from the Flow port and dropping it into empty space on the Graph surface will bring up the Quick Create menu and Autolevel may be one of the suggested nodes. In the Toolbox's menu, you can select &quot;Show most-used nodes only&quot;. This will hide the nodes you don't use frequently from the toolbox, giving you more screen space and making it easier to find the nodes you do use. The other nodes are still available in the Quick Create menu and Search box. "},{"id":"/Guide/Graph/Sharing-Graphs.html","title":"Organizing and Sharing","text":"The Infinity Graph makes it easier to re-use graphs so you don't have to recreate common structures repeatedly. Organizing into Multiple Graphs Let's explore this concept with an example. We have a graph where we first create the terrain then texture it using a specific process. To keep the graph clean, it is a great idea to split the two portions into their own tabs. You can do this in two ways: Create a new tab and create the texturing graph structure there. You will need to manually set up Portals and Chokepoints to communicate across the graphs. Create the texturing structure in the first graph, then select the nodes of that portion and use the Graph Menu to move those nodes to a new graph. Gaea will automatically convert any relevant connections into Portals. Using Portals and Chokepoints In our example, we're relying on two specific outputs - the Erosion node's primary output and the flow output. So we convert those two into Portals. Now those outputs can be accessed from any other graph tab. In the second graph, the Texture and RockMap nodes rely on the primary output, while the second Combine node relies on the flow output. We can easily connect them with Portals, however in this case we have setup two Chokepoint nodes. This is not necessary, but it can be helpful for multiple reasons: Portals can sometimes be visually confusing as we don't get to see a visual flow from the lack of connection lines. By funneling things through Chokepoints, we get to see the flow and multiple nodes can connect to the same Chokepoint. This reduces the clutter that can occur if you have too many connections to the same portal. Chokepoints make it a lot easier to reconnect multiple points. For example, if at some point we decide to process the Erosion node further by adding another node, then without Chokepoints you would end up having to reconnect several nodes. Here, you would just reconnect the chokepoint. In fact, for extra clarity and ease of use, you can set up a chokepoint in both graphs and turn the first Chokepoint into a portal instead of doing it directly to the node. Lastly, Chokepoints become &quot;gateways&quot; when you share a graph. Sharing Graphs Let's say you like this texturing technique and want to use it in other graphs later. This is very easy to do when you have Chokepoints set up and the part of the graph you want to share is in its own tab. You can export a graph by selecting Export Graph in the Graph Menu.  In the other file, you can use the Import Graph command to bring in the export graph. It will get its own tab like the graph from where it was exported. All you need to do next is connect the appropriate nodes from other graphs to the Chokepoints of the freshly imported graph. "},{"id":"/Guide/Using%20Gaea/Create-Shapes.html","title":"Create with Primitives","text":"CG applications use primitives, such as cubes and spheres, to create basic geometry. Gaea being a terrain software uses geological primitives such as Mountain, Range, and Crater. Procedural Primitives Most of Gaea's Primitives fall into this category. They generate basic geological shapes that can then be processed and eroded to look like a realistic terrain. Procedural generation allows you to create an infinite number of variations from the same node. TODO: Image Primitives expose a property called Seed. Changing this property randomizes the shape. This allows you to create multiple primitives that follow the same general paradigm but are distinctly different shapes. Primitives can be used by themselves, for example the Mountain node can help create a &quot;hero mountain&quot; without needing other primitives. Or multiple Primitives can be put together using the Combine node. When multiple Primitives are combined, they can produce sophisticated shapes. <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/1A1xXfTlKqM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> This video continues in Color Production. Hand Drawn Primitives The Draw and Islands nodes allow you to draw shapes which serve as guides upon which further processing is performed. For example, Islands will turn guides into a complex archipelago. The Mask node can also act as a Primitive even though it is categorized as a Data Map in the toolbox. However, it will not process the shape you draw. File Import To import a heightfield in any major 32, 16, or 8 bit image format, create a File node and load the desired file. You can simply drag and drop a valid file on the graph and a File node will be created for you. Importing Meshes and Geospatial Data Support for importing meshes as heightmaps, and satellite data such as DEM, SRTM, and other formats will be available soon. "},{"id":"/Guide/Using%20Gaea/Modify-Shapes.html","title":"Modify Shapes","text":""},{"id":"/Guide/Using%20Gaea/PostProcess.html","title":"Post Process Stack","text":"The Post Process options sit right under the Properties and provide quick access to common functions. Using the Post Process Stack allows you to skip having to create common adjustment nodes, which reduces the clutter in your graph and increases efficiency. Post processing options offer other choices. These are individual options which you can turn ON/OFF per your requirements. Turning ON a particular option, e.g. Bias-Gain, will show the sliders Bias and Gain. Not all effects are shown in the quick access toolbar. To access all the other effects, you can use the ... menu next to the toolbar.  Process  Description  :--------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------   Autolevel  Automatically levels the terrain where the heights are proportionately distributed between the highest and lowest. See AutoLevel.   Equalize Equalizes the terrain where the heights are linearly distributed between the highest and lowest. See AutoLevel.   Log  Applies logarithmic scaling that bulks up the terrain. See AutoLevel.   Invert Inverts the terrain.   Bias-Gain  Bias-Gain, or more commonly seen in image editing as Brightness-Contrast, is a basic adjustment used to control a terrain's height and shape. See BiasGain.   Clamp  The terrain is proportionally reduced in height. See Clamp.   Clip The terrain is clipped beyond the extents provided. See Clamp.  Displace Distort the terrain using built-in noise. See Displace.   Shaper Bulk up or bulk down the output. See Shaper.  Max  Selects the higher of the two inputs. See Combine.  Min  Selects the lower of the two inputs. See Combine.   Diff Creates the difference of the two inputs. See Combine.  Influence  Blend between the original/unprocessed and processed versions. See Combine. The Influence slider is a very simple yet powerful tool for layering effects. It blends the output back with the input, allowing you to manage the influence of the current node. // TODO: Image Here is an example: a heavily-eroded terrain goes through Recurve, where the Influence is set to 0.5. This yields a more realistic looking output of Recurve, while still being able to use strong values in Recurve to create long striations. "},{"id":"/Guide/Using%20Gaea/Masking.html","title":"Masking","text":"Masking Nodes Masking is a core mechanism you will need to rely on when working with procedural shapes in node graphs. At its most basic, masking works exactly like you would use in a paint program: define an area and only that part is modified. A mask must always be a heightmap, not a color map. Brighter areas get affected more, darker areas affected less. In Gaea, you will mostly deal with two types of masking - process mask and blending mask. Process Mask Almost every node contains a &quot;Mask&quot; input port. If you connect a mask to a node, the processing of that node is applied only within the masked area. For example, if you mask a Terrace node, the terracing effect is applied to the brighter areas. The Mask node is often useful in a situation where you can manually draw a freehand mask. Blending Mask Blending Masks are more useful because they provide extra flexibility. To create a blending mask, two different nodes are connected to a Combine node. The mask will blend the two terrains as defined by the mask. Brighter areas defined by the mask become terrain A; darker areas become terrain B. The added advantage with the Combine node is that, instead of simply blending the two terrains, you can use one of several different blend modes, such as Add, Subtract, Max, etc. While the Mask node is useful here too, you will probably use Data Maps, such as Slope or Height, more often.  It is worth noting that, even though a portion of a terrain's surface may be masked, Gaea will process the entire surface and then apply the mask. Internally, the masking is the same as a blending mask, where A is the processed version of the terrain and B is the unprocessed version.  A masked Combine node is much faster to reprocess than an effect or erosion node that is masked. If you tend to change your mask frequently, you can achieve Gaea's built-in masking manually. This is done by connecting the processed output to a Combine node's Input1 and the original, unprocessed output to Input2, and finally setting the Combine node to Blend mode with 100% Ratio. "},{"id":"/Guide/Using%20Gaea/Pinning.html","title":"Pinning Nodes","text":"Pin node for focus Pinning a node locks the preview to that node. When a node is pinned, changes made to the other nodes will force updates to all nodes between that node and the pinned node. This allows you to see the end result of a change. To pin a node, right-click it and select Pin. You can also select the node and press F. Now when you edit any other node before the pinned node, the changes will propagate all the way to the pinned node every time. The Pinned node can be accessed quickly from the Graph Toolbar. It is shown as a green link. Pin node as underlay When viewing 2D masks, Data Maps, or Color nodes, the 3D and 2D previews are rendered as flat planes. To see how the same mask or color map would look on a 3D surface, you must choose which terrain node to use as the &quot;underlay&quot;. In most situations, this will be the last terrain node before you begin the color creation process. To pin a node as the underlay, right-click the node and select Pin as Underlay. You can also select the node and press G.  Be mindful when you modify nodes that are before the Underlay. If they are part of the chain that leads up to the Underlay node, modifying them will cause all nodes in between to update as well, much like normal Pinning. This can make Gaea slow when working in 2K or higher preview resolution. The Underlay node can be accessed quickly from the Graph Toolbar. It is shown as a purple link. <div class=\"row\"> <div class=\"col-lg-6\"> <figure>  <figcaption> A color map visualized without an Underlay. </figcaption> </figure> </div> <div class=\"col-lg-6\"> <figure>  <figcaption> A color map visualized with the Erosion node marked as Overlay. </figcaption> </figure> </div> </div> "},{"id":"/Guide/Using%20Gaea/Erosion.html","title":"Erosion","text":"Erosion is the primary process through which we turn abstract and geometric shapes into believable terrains. The Erosion Node The Erosion node is the primary erosion node in Gaea. However, there are many additional nodes such as Sediment, Stratify, Thermal that provide additional erosion and natural processing options. Layering Erosion Erosion can give you even more complex results when used multiple times. If you simply increase values such as duration or strength, Masked Erosion While the Erosion node can be masked using the standard Masking process, the Area mask input gives you additional options. When an Area mask is connected, you can control the Rock Softness, Precipitation, or Erosion Strength. Unlike the standard mask, this mask allows the processing to be masked but not the shape. For example, you can mask out the top part of a volcano and choose Precipitation as the Area Effect. This forces the erosion-inducing precipitation to occur only within the masked area. But the resulting erosion can flow out and affect the rest of the terrain. For more information, see Selective Processing in Erosion. Data Output The Erosion node creates three key data outputs: Wear: the portions where erosion removes sediments. Deposits: the resting position of those sediments. Flow: the path of the sediments from their original location to the final resting position. These maps can be used for texturing, or for driving other nodes.  In digital terrains, inexperienced artists will often try to use the Flow output too prominently for texturing. While this may work in some situations, it tends to create unrealistic textures and can make your terrain look fake and &quot;CG&quot;. Try to at least use a Texture node to complement the flow map. Secondary Forms of Erosion Misconceptions Erosion should be the last step "},{"id":"/Guide/Using%20Gaea/LookDev.html","title":"Look Dev","text":"Look Dev or Look Development nodes are composite nodes that allow you to quickly achieve specific geological formations out of simple shapes with minimum effort. Most Look Dev nodes employ erosion processes, so you do not need to apply additional erosion unless needed. "},{"id":"/Guide/Using%20Gaea/Color-Production.html","title":"Procedural Textures","text":"The core concept All the processes for creating color textures in Gaea are dependent on flowing color ramps/gradients into a black and white mask. Let's take a look at a basic example. The lowest part of a gradient corresponds to the lowest part of the terrain. The highest part of the gradient corresponds to the highest part of the terrain. Everything in between is distributed as dictated by the gray intensity. // TODO: Image In this example, you can see how the gradient from a CLUTer node maps to the heightfield. // TODO: Image If, however, you take the same CLUT map and use a FlowMap instead of using the height of the terrain as the input, you get a different type of texture output that follows the flow lines of the FlowMap output. To help you create complex procedural masks from which you can create color textures, Gaea provides an array of nodes known as &quot;Data Maps&quot;. What are Data Maps? Data Maps are special masks. They let you select basic aspects of the terrain (such as slope, angle, curvature), or synthesize complex data through simulations (such as water flow, soil deposits, etc). Additional quick texturing data maps, such as Texture and SurfTex, help create pseudo-random texture masks through which you can quickly achieve color textures with minimal effort. These nodes break the traditional basic data (slope, angle, etc) + chaos (Perlin noise) method, or the heavy reliance on flow output from erosion. In these situations, you need to find a good seed to make it work. With Data Maps, there is visual randomness, but it's created from systematic analysis of the terrain and follows natural principles. The resulting color maps created from this data look more believable. A basic texture with Data Maps The following tutorial continues from Introduction to Gaea. <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/4AFDXxYlQMg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Guide/Using%20Gaea/Building.html","title":"Build and Export","text":"The output from your project must be saved to a file in order to use it elsewhere. To do this, you must build the output. When you build the output, Gaea will create it at your target resolution. This may take a while to build depending upon the complexity of your terrain and the effects used. Over the course of a complex project, saving and managing the appropriate outputs can become a tedious task. Managing outputs for several different nodes, especially those with multiple outputs like the Erosion node, can make it even worse. The Build Manager simplifies how builds are saved, organized, and managed for future use. Quick Export: Marking for Export Instead of creating a dedicated Output node and having to specify the file to save, you can mark a node for automatic output. Any node can be marked for export by right-clicking a node and selecting Mark for Export, or pressing F3. When you build the terrain, all nodes marked for export will be saved to file. If a node has more than one output, all outputs will be saved. Once a node is marked for export, it displays this icon underneath the node. By default, the name of the node will be used as the filename. The filename, format, and the outputs/ports to export are modified in the Build Tab. The files are saved in the path set in the Build tab. Output Node If you prefer direct control over where and how the files are saved, you can use an Output node. It is also useful when you want to save the same output to multiple formats where you can set up an Output node per format. Build Mutations Gaea provides a mutation facility during build to create multiple variations of the same terrain. You can select up to 99 mutations in the Build Manager. This will run the build once per each mutation where seeds of all nodes are randomized. Doing this gives you a unique terrain in every mutation while still following the core recipe of your graph. Build Mutations  Each mutation’s .tor file is stored with the output, so you can manually tweak a specific mutation if desired. You can also specify mutations in the command line in the Build Swarm. "},{"id":"/Guide/Using%20Gaea/Cache.html","title":"Baking and Caching","text":"Gaea uses various forms of baked caches to speed up processing and build times. What is baking? Baking, in Gaea's context, means building a node to a specific high resolution and then storing it in a locked or &quot;baked&quot; form. A baked node can display previews at higher resolution than your normal preview, while allowing you to work with the current lower resolution previews for the rest of the graph. It is always preferable to see the viewport previews at higher resolution so you can discern finer detail and resolution-dependent shapes. However, keeping your previews at 2K or 4K can be slow, especially when working with large graphs. When a part of the graph is finalized and you do not anticipate any changes - even temporarily, you can bake that part of the graph to prevent it from being reprocessed when the file is loaded or the nodes are refreshed. If you select a high resolution for the baking, the baked preview will be stored at that resolution while the rest of the unbaked nodes are shown at the current preview resolution. Once further nodes are finalized, you can bake those too. Session Cache A session or &quot;soft&quot; cache helps resume your work faster the next time you open the file. It is disabled by default, so you have to opt-in to use it. To enable, open the Baking Menu and enable Cache graph on close. When closing the file, whether by exiting Gaea or switching to a different file, Gaea will save all the processed nodes' cache to file. Next time you open the file, instead of reprocessing all nodes from scratch, Gaea will load the session cache to memory.  For better performance, use a solid state drive for your cache location. Baked Cache Baking nodes can help save time when editing the graph or building the actual graph. Unlike the session cache, baked cache is permanent. A baked node cannot be edited unless it is unbaked. To bake, open the Baking Menu and select the resolution you want to use for baking. In most cases, you should select the same resolution as your final build. Once the resolution is set, select the node you wish to build and click Bake Selected in the Baking Menu. The selected node and all dependent nodes (the entire node tree left of the node, aka &quot;ancestors&quot;) will be baked.  Changing the resolution AFTER nodes have been baked will invalidate existing bakes. Nodes can be baked to a maximum of 8192 x 8192. Higher resolutions will be available in the future. As portions of your graph are finalized, you can bake them to prevent having to reprocess them repeatedly. When building the final terrain, the Build Swarm will use that cache for those nodes instead of building them. This can significantly speed up build times. Nodes can be unbaked through the Baking Menu. Linchpin Nodes An added bonus of baking is that it can free up a lot of RAM. When loading a baked cache, Gaea will only load &quot;linchpin nodes&quot;. A linchpin node is a baked node that is connected to unbaked nodes. Ancestors of linchpin nodes are not loaded, thereby saving processing power and memory. TODO: IMAGE Consider this graph. Mountain is connected to Displace, and Displace is connected Erosion, which will be baked. Erosion is connected to Texture, which will not be baked, making Erosion a linchpin node. Baked nodes that are not loaded can be loaded through the property editor. However, if you wish to modify anything, it is recommended to unbake and bake portions of the graph. Cache Locations If your file is MyFile.tor, the baked cache will be stored in \\Caches\\Hard\\MyFile_09cb3a next to it. For session caches, all caches are stored in the Central Cache Repository. It will follow the same naming pattern, such as \\Caches\\Soft\\MyFile_09cb3a. The root path for the Cache Repository is set in the Preferences. The Cache readout in Gaea's status bar will show you the size of the cache. Clicking the readout button gives you options to cleanup old cache data.  The hex code at the end of the cache name prevents collisions between two files of the same name when using a central repository. "},{"id":"/Guide/Concepts/DragOut.html","title":"Drag Out","text":"&quot;Drag out&quot; is a shortcut feature in Gaea's Infinity Graph. "},{"id":"/Guide/Concepts/Resolutions.html","title":"Understanding Resolution","text":"This is one of the central precepts of terrain design. When you work on a terrain, and especially when you export, the amount of detail in the final result is calculated based on the size or resolution of the export image. Even when you export as a mesh, the image resolution is critical. In Gaea, there are two different resolutions you work with: Preview Resolution and Export Resolution. Preview Resolution The Preview Resolution controls the quality of detail of your terrain preview in the viewport. You can choose from 512 x 512 (0.5K) up to 4096 x 4096 (4K) resolution.  The higher the resolution, the more detail you will get. Higher resolutions, however, can take 4x longer to process the image. Switch to higher resolutions only when you need to. You can change preview resolutions as often as you like. When you switch the resolution, the terrain preview is rebuilt. For 0.5K and 1K previews, the process is usually fast. For 2K and 4K, it can take longer.  4K resolution previews are still experimental and not fully optimized. This may lead to slower performance with complex graphs. Export Resolution The Export Resolution controls the quality of detail in your built/exported terrains. In Gaea, there is no limit on maximum resolution except for what your hardware allows. By default, you can export to resolutions of 1024, 2048, 4096, 8192, 16,384 (16K), and 32,768 (32K).  For resolutions beyond 16K, we recommend using Tiled Builds to contend with unlimited resolutions on even modest hardware. Like with preview resolutions, high export resolutions can take longer than the preview - something to be expected with builds. In essence, when you create a terrain at preview resolutions, you're creating a &quot;template&quot; with your settings. When you &quot;build&quot; a terrain, Gaea takes that preview template and uses those settings to build the terrain from scratch using the full export resolution. This results in more detail than is possible in previews. For more information on building terrains, see Build Manager. Resolution Dependence All terrains/heightfields, no matter how procedural, are still bound to the limits of their resolution. While most aspects of Gaea are resolution-independent - meaning, an effect or shape will remain the same across different resolutions - there is always a chance that certain shapes and effects may change across several nodes when seen at different resolutions. This is a natural side effect of heightfield-based terrains. To make sure the results are as expected, it is helpful to build and export the terrain at final resolution once in a while. If the shapes change and you are unsure where it happens, you can mark for export several key nodes in your graph and examine where the changes occur. Forcing a resolution If you want to enforce a specific resolution, you can do so manually by saving the graph up to the desired node at your desired resolution. Then you can import it to a new graph using the File node, which will upscale the file to the new final resolution. "},{"id":"/Guide/Concepts/Scale.html","title":"Terrain Scale","text":"Gaea supports setting an arbitrary scale for your terrains through the new Terrain Definition panel. If you're a casual terrain artist, this won't significantly affect your workflow — the defaults will be sufficient. However, if you're creating precisely-scaled terrains, Terrain Definition is your best friend. Terrain Definition The Terrain Definition popup is found in the main toolbar. You define the Height of your terrain in meters. The Scale determines the extent of the entire terrain. By default, Gaea terrains are set to be 2.6km tall (Height: 2,600m), and 5 x 5 square kilometers wide (Scale: 5,000m). Internally, the terrain vertical ratio is calculated as: (height / scale) A height of 2.6km is usually more than enough for most terrains. For perspective, Mt. Everest is 8.8km tall. Choosing an extreme height is not recommended unless you know how to handle the ramifications of such tall terrains. It is important to note that, while the maximum height is set to 2600m, it does not mean that any shape created will automatically fill the entire height range.  Terrain Definition is non-destructive. You can scale your terrain and the update will be immediately applied without the need to rebuild your terrain. You can change the values as often as you like. Scale Philosophy Scale in all CG is an imaginary construct. With Gaea and heightfields, we have pixels when using an image format, or an array of floats when using a raw format. A Gaea terrain in its most basic form is a cube made of infinite numbers, which must be translated to a fixed size as defined by the output resolution and image format. For example, if your output resolution is 2048 x 2048, then the size of the terrain in pixels is 2048 on either side - this is uniform across all image and raw formats. The &quot;vertical&quot; capacity is defined by the maximum storage capacity of the format. 32-bit TIFF, EXR, RAW and PFM can store approximately one million levels of vertical &quot;heights&quot;.  Gaea stores and processes heightfields as &quot;floats&quot; (a high precision number). Heights are stored in a~0.0,000,000 - 1.0,000,000 range. For the more technically minded, this is just a simplification. Gaea uses IEEE 754 format 32-bit floats. This image shows the &quot;cube&quot; of the default terrain size, which is 5000 x 5000 meters wide, and 2600 meters tall. You will notice our cube is not an exact cube; it is shorter than it is wide. For realistic use, we must visualize the data the way we perceive mountains in the real world. So we force a height-to-width ratio to satisfy the human perception of scale for terrains. If you want a perfect cube, your height and scale must be the same. In this image, our terrain is a 5000 x 5000 meters and 5000 meters tall. So why don't we use a perfect cube? Because it distorts our perception of terrains. This is what Perlin noise would look like in the &quot;cube&quot; format. This is what the same noise looks like with height-to-width ratio applied. As you can see, it fits our perception better. It is important to note that all these transformations are imaginary. The underlying data is still a fixed grid of numbers.  The only place the terrain scale affects how your terrain is processed, is when Real Scale is turned ON in the Erosion, Snow, or Thermal nodes. Although they can be overridden per node. This begs the question of how do you, the user, translate this to practical metrics for exporting and usage in other applications or game engines. Practical Usage of the Scale Philosophy When exporting the terrain as an image/heightmap, you must make a fundamental decision: Keep the natural scale without applying perceptual ratio. Bake the perceptual ratio mentioned above into the pixels. Force the terrain to use the entire bit-range of the image format. These options are known as the Output Range options in the Build Manager. See Build and Export for information on setting those options. Below we will discuss the implications of each option. There is no right or wrong way to scale the output range. It depends on what target application you are using, and how. Raw Scale Technically, this is the most accurate representation of the terrain because the output is exactly what the software itself &quot;sees&quot; when processing. But it will not be perceptually accurate. You will need to manually scale the output along the vertical axis. An easy way in most applications is to create a box of the desired size and match the scale of the terrain asset. Or if you use a heightmap as a displacement source, then you can set the displacement in meters (or appropriate units). If you need to scale it down vertically, use the Height-Scale ratio explained below. Proportional or Baked Scale This method will bake the ratio you see in the viewport into the heightfield. This is very useful when exporting meshes. You lose a minor amount of vertical fidelity, but unless you are creating closeups of the terrain, it will not affect you. When bringing the terrain into your target application, you can optionally treat it as a perfect cube and your ratio is already baked into the vertical values. Normalized Scale Forced scaling, in many situations, can give you maximum vertical fidelity. Gaea will force the terrain to use the entire ~0.0,000,000 - 1.0,000,000 heightrange in 32-bit formats. In 16-bit images that would be 0 - 65,534. In 8-bit, it is 0 - 254. If you need more vertical fidelity for closeups, this option may help as you get more density in the up-axis than in other methods. When using forced scaling, you must adjust the vertical size of your output manually in the target application. Like with Natural Scale, use the Height-Scale Ratio. Important Readouts for Terrain Scale In the Terrain Definition, you get two readouts: Real Scale and Height-Scale Ratio. Real Scale: This is the pixel-to-meters &quot;density&quot; for your output. It is calculated by dividing your final output resolution (selected in the Build Manager) by the scale in meters set in the Terrain Definition. For example, 5000 x 5000 meter terrain exported at 2048 x 2048 pixels results in 2.4 meters per pixel. You can change your output resolution to see the exact ratio you get. This information is often used by game designers to ensure scale accuracy between the terrain and other game elements. Height-Scale Ratio: Ratio of the Imaginary Cube. If you export using Raw or Normalized Scale, and need to resize your terrain, you can resize it by this ratio. The ratio is simply height / scale. "},{"id":"/Guide/Concepts/FileFormat.html","title":"Gaea File Format","text":"Gaea saves files in the following formats: .TOR file .TORX file .RESOURCE file .SCULPT file .TOR/.TORX file Gaea terrain projects are saved as a .TOR file. All Gaea editions can read this format. The .TORX format is available in the Enterprise Edition only. When saving in this format, Gaea saves the project as an XML file. This is useful for direct manipulation. .RESOURCE file When using hand drawn nodes such as Mask, Draw, or Islands, the binary data generated will be stored in a .tor.resource or .torx.resource file. So if you have a file called BigMountain.tor, the resource file will be called BigMountain.tor.resource.  If the .resource file for a project is missing, all hand drawn nodes will become empty. When running a build on a project with missing resource, the Build Swarm will throw a warning and exit. .SCULPT file Erosion Studio projects will be saved as a .SCULPT file. "},{"id":"/Guide/Build/Manager.html","title":"Build Manager","text":"Build Manager Build Options Node List Any node marked for export shows up in the Build Manager list. You can also add other nodes directly using the Add Node button. Each node will expose its savable filename, the format in which it will export, and the different outputs it exposes. Build Destination This is the path where the built output will be saved. By default, it is saved in a version-controlled path in the Builds repository. You can always enter a normal path directly, or pick from presets in the dropdown. For additional information see Organizing Builds below. Build Definition Resolution The output resolution of the build. Higher resolutions give you better detail at the cost of longer processing times.  16k and 32k builds are experimental at this stage and will be optimized over the next several builds. Format This dropdown allows you to choose the format in which your output is saved. You can also select per-node file formats in the node list. If you change the selection here, all nodes will default to the selection made here. Mesh Formats are not available globally and must be chosen per node. For details on the individual formats available, see Export File Formats. Output Range  Output Range  Description   ----------------  ---------   Raw Terrain retains natural scale between 0..1 and ignores artifical scaling created by the proportions in the Terrain Definition. This may require you to scale the height of the terrain in your target application if it does not understand natural scaling.   Proportional  Terrain is scaled to the proportions in the Terrain Definition. This is useful for mesh exports or heightfields where scale should be handled automatically. In some cases, this method may show banding.  Normalized  Terrain is forced to use the full range between 0..1 providing greater scalability. However, this will require manual scaling in your target application. Tiled Output  Tiled output is experimental at this stage. It will be stabilized in future updates. Additional Options Resample This option is for builds that need to be taken to Unreal Engine, Unity, or other applications where standard resolutions don't work. It is turned off by default. Unreal Engine requires particular dimensions for ingesting terrains. To meet their requirements, Gaea will build the terrain at its own fixed resolutions and then faithfully downsample to the desired resolution. Pick the nearest Gaea resolution in the main Resolution dropdown, then select the target resolution in the Resample dropdown. Color Space You can choose to save color maps in RGB, sRGB, or scRGB color spaces. Does not apply to grayscale heightfields or masks. Mutations Gaea provides a mutation facility during build to create multiple variations of the same terrain. You can select up to 99 mutations. This will run the build once per each mutation where seeds of all nodes are randomized. This gives you a unique terrain in every mutation while still following the core recipe of your graph.  Each mutation’s .tor file is stored with the output, so you can manually tweak a specific mutation if desired. Build Options  Setting  Description   ---------------------------------  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   Save a copy of this .TOR file  Saves a copy of the current .TOR or .TORX file in the build folder.   Close Gaea UI  The Gaea interface - especially when using high resolution previews - can consume enough RAM to cause an impact on high resolution builds. To conserve memory, you can check this option to close Gaea when the build starts.   Open folder after build  Check this option to open the build destination folder when the build completes.  Generate Build Log Generate a machine- and human-readable build log in .txt format at the build location.  Beep when done Checking this option will sound a beep when the build is complete. Version Control and Organization Organizing Builds The Location field in the Build Manager provides two built-in options for storing your builds. The first option is the central build repository, which is stored in Documents\\Gaea\\Builds\\[Filename] by default, but can be changed to any location — even to a local network or an online shared folder with OneDrive, Dropbox, GDrive, etc. This can be useful in team situations. Exported Files The second option is to have it stored alongside the file in a Builds folder. So if your file is called MyTerrain.tor, a folder called MyTerrain_Builds will be placed next to it. In both cases, inside the Builds folder, a subfolder with the build timestamp is created. The build output files, a build.info file, and the .tor copy are stored inside this subfolder. Example paths Central Repository: C:\\Users\\Username\\Documents\\Gaea\\Builds\\EastRiver\\2018–06–22_22–55–31\\ Local File: D:\\Work\\Terrains\\EastRiver_Builds\\2018–06–22_21–55–31\\ These are not the only options. You can explicitly specify a location instead of choosing a template, or you can create your own combinations using an absolute path and variables such as: [FileLocation] Location of the currently open file. [Builds] Central build repository. [Filename] Name of the current file without extension. [Resolution] Current resolution (eg. 8192). [Timestamp] Sortable timestamp in yyyy-MM-dd_HH-mm-ss format. [Username] Your local network identity. [Machine] Your local network machine name. [Date] Current date in yyyy-MM-dd format. [Time] Current time in HH-mm-ss format. [+++] Increments a 3-digit number when an existing path exists. So you could create your own path template; such as: [Builds]\\[Filename]\\[Timestamp]\\[Resolution]\\  which would create: ~\\Documents\\Gaea\\Builds\\EastRiver\\2018–06–22_21–55–31\\8192\\ Or something more specific; such as: \\\\00.00.00.00\\Team\\Terrains\\[Username]_[Timestamp]\\  which would create: \\\\00.00.00\\Team\\Terrains\\Bob_2018–06–22–55–31\\  If you encounter trouble writing to network shares, we recommend hosting the share as a drive instead. Version Controlling Terrains Gaea's Build Manager and Build Stack give you low level version control without additional overhead. The &quot;Save copy of .TOR&quot; option is useful when you want to manage different versions of your actual project file. When turned ON, every time your build finishes, a copy of the .tor file in the exact state of that particular build is stored alongside the build output. You can easily go back to any older build state for your file, and save it as new file. You can also map the folder to almost any modern version control system (Git, Mercurial, Visual Studio Team Services, etc.), or share on a network folder with your team. Build Swarm For advanced use, see Build Swarm. "},{"id":"/Guide/Build/Tiled.html","title":"Tiled Builds","text":"Tiled Output vs. Tiled Processing Let's differentiate between tiled output and tiled processing: &quot;Tiled Output&quot; is when the build results (regardless of how they were built) are saved in a grid - that is, the overall output is split into even tiles. Tiled Output is used for very large terrains, especially in games, where parts of the terrain are &quot;streamed&quot; into memory for efficiency. &quot;Tiled Processing&quot; or Distributed Processing is when a terrain is divided up into a grid of tiles before processing. After processing, the final output may be saved as individual tiles or as a single image. Tiled Processing is used to process very large terrains beyond what may be possible within the limits of your current hardware. By dividing the terrain into smaller tiles and processing them one by one, a remarkably smaller amount of RAM is needed for processing. Tiled Output TODO Tiled Processing  Tiled Processing is scheduled for inclusion in the March-April update cycle. There are natural limitations of Tiled Processing. One is that each tile is processed without any relation to the neighboring tiles. This may result in abrupt differences at the borders. To overcome this, an Edge Blend setting is provided. You can choose Low, Medium, High, or Overkill. Increasing the blending amount will increase the time taken for processing, and the memory required. However, it will still be less than a normal or linear build. Avoid Screenspace Effects Another natural limitation is the inability to process screenspace effects. Screenspace effects are nodes such as Swirl, Whorl, Transform, etc. Such effects require processing the image as a whole and will not look correct when processed as tiles. If you have used any such nodes, there will be a small warning icon in the status bar, and a more comprehensive warning in the Build Manager dialog. "},{"id":"/Guide/Build/Swarm.html","title":"Build Swarm","text":"The Build Swarm is the command line building engine for Gaea. Whenever a large scale build is needed, Gaea launches the Build Swarm to build the terrain. You can also launch it manually if needed. The Build Swarm can be found in the Gaea installation folder as Gaea.Build.exe. The Build Swarm writes status messages to StdOut and can be monitored remotely if needed. You MUST use the --silent argument when capturing StdOut data otherwise it may overload your application and slow down the build itself.  Using the Build Swarm manually or through automation is recommended for advanced users only. Command Line Arguments  Gaea uses double dashes -- instead of a single dash for command line arguments. For paths, always encapsulate them in double quotes to avoid path truncation. Simple example of a command line build: Gaea.Build.exe &quot;C:\\Users\\Me\\Documents\\Gaea\\MyFile.tor&quot;  Modes --silent Silent Mode disables all console output. This is useful for batch or unattended builds where you do not need visual readouts for progress or build information. --automata or --automation Automation Mode is used when automating Gaea from another application. The output is limited to simple status messages which can be read by another software and displayed to end users as needed. For more information on how to use Gaea from other applications, see Create a Bridge. Management Switches  Switch  Description  :-----------  :---------------------------------------------------------   --savetor Saves a copy of the current file in the build folder.  --buildlog  Saves the build log to buildlog.txt in the build folder.   --open  Opens the build folder after the build is complete.  --close Immediately closes the window after build is complete.   --beep  Plays a short beep at the end of a build. Build Modification Switches  Switch  Description   :-----------------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   --unclamped Forces the build to use Natural Elevation. See Terrain Scale.  --forcescale  Forces the build to use force Full Range scaling. See Terrain Scale.   --mutate##  Repeats the build and randomizes the seeds of every node to create variations with each build.Valid options for the ## portion are numbers from 1 to 99. See Build and Export.   --nodemap Creates an XML node map file for any exposed properties.  --resolution####  Sets the resolution of the build.Valid options for the #### portion are 512, 1024, 2048, 4096, and 8192.  --cpulimit##  Limit the number of cores Gaea will utilize. For multi-tile scenarios, use --cpulimit1 to assign a single core to each instance.  var:value Sets the 'value' property of the 'var' exposed node property.See Automating Gaea for details. Any such variable arguments must come after all switches.  Complex example of a command line build automation: Gaea.Build.exe   &quot;C:\\Users\\Documents\\Gaea\\sidefx_erosion_automata.tor&quot;   --silent   --resolution0512   filein:&quot;Z:\\mountain.exr&quot;  fileout:&quot;Z:\\mountain_out.exr&quot;   duration:0.518   rocksoftness:0.271   strength:0.184   inhibition:1.0   baselevel:0.0   realscale:true   featurescale:2000   seed:0   aggressivemode:true See Automating Gaea for details. Batch Building You can run a batch build by executing a batch (.bat) file as shown below. REM Change drive, just to be sure C:  REM Go to the Gaea install folder cd %programfiles%\\QuadSpinner\\Gaea  SET vars = --silent --savetor  REM List all files to build in quotes Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-001.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-002.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-003.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-004.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-005.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-006.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-007.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-008.tor&quot; vars Gaea.Build.exe &quot;C:\\Users\\Documents\\Gaea\\ErosionB-009.tor&quot; vars  In the future, you will be able to drag and drop multiple files on Gaea.Build.exe to run a batch build. Build Logs Build Swarm logs are both machine and human readable. All values are tab separated. STARTLOG// Denotes start of a log GAEA&lt;VERSION&gt; // Gaea version stamp  START &lt;TIME&gt;// Build start time (yyyy-MM-dd HH:mm:ssz) END &lt;TIME&gt;// Build end time (yyyy-MM-dd HH:mm:ssz) TOTAL &lt;TIME&gt;// Total time taken (HH:mm:ss.ms)  RESOLUTION&lt;RES&gt; // Total build resolution BUCKET SIZE &lt;RES&gt; // Tiled build bucket resolution  NODE&lt;NAME&gt;&lt;TIME&gt;// Node name and time taken to build(HH:mm:ss.ms)  OUTPUT&lt;PATH&gt;// Build destination directory ENDLOG// Denotes end of the log "},{"id":"/Guide/Build/FileFormats.html","title":"Export File Formats","text":" If you are looking for information on the Gaea's formats, see Gaea File Format. Gaea supports all modern (and some legacy) file formats for both flat files and meshes. For Export  Format 32 bit 16 bit8 bit  -------  :-----:  :-----:  :-----:   OpenEXR  •     TIFF •  •    PNG  •  •  •   RAW  •  •    PSD   •  3D Formats Wavefront OBJ (.obj) Autodesk Filmbox (.fbx) Point Cloud (.xyz) For Import Gaea supports the following formats for importing data: .exr .tif/.tiff .jpg/.jpeg .png .psd .hdr .pfm .r32 .raw .bmp Precision Gaea stores and processes its heightfields in 32-bit floating points, which is compatible with all professional CGI applications. 32-bit For practical purposes, exporting as either OpenEXR or TIFF will give you the best results and maximum compatibility with other applications. If you are using a custom pipeline, using R32 or PFM formats may be of more use. See the section below for those formats.  If you are saving output from Gaea to bring back to Gaea either in the same or different file, we recommend using the .r32 or .pfm formats for maximum fidelity and efficiency. 16-bit While displacement/heightfield information requires 32-bit precision for accuracy; color maps, masks, and other secondary data which may have fewer levels of complexity can make use of 16-bit formats, such as PNG. This can help save on disk space as larger worlds will require a lot of storage space. Storing in 16-bit also helps performance. In fact, if your terrain does not contain many smooth details, you can even export your main displacement as 16-bit. Game engines, such as Unity, can only import RAW 16-bit (ushort) format terrains. 8-bit In some cases, for example: black and white masks, you may not need a high level of precision at all. You can use 8-bit PNG output which can increase performance and save disk space. Custom Workflows If you are using Gaea in a custom workflow, such as automation, you may require the data to be as simple and efficiently readable as possible. .R32 32-bit (float) and .RAW 16-bit (ushort) This is the simplest format you can have. It is a binary format array of float (IEEE 754) or unsigned short. The file has no header and can be read directly as a binary stream. The files will use Little Endian. The size of the heightfield should be square root of the byte length divided by the size of the type (4 for float, 2 for ushort). The .R32 format will store values between 0.0f and 1.0f. While the .raw format will store values between 0 and 65535. Both formats are recommended for heightfield (grayscale) data only. "},{"id":"/Guide/Bridges/Houdini.html","title":"Houdini","text":"Combining the power of Houdini and Gaea Houdini is the most powerful procedural design platform. Gaea's dedicated terrain processors can augment Houdini's terrain tools to give you the best of both worlds. You can utilize a single Gaea node such as Erosion, Stacks, Texture, etc or entire graph networks inside Houdini. Installing the Bridge Preparing the Gaea file To use Gaea in Houdini, you must pick from one of the pre-made recipes provided with the Game Dev Tools, the QuadSpinner Automation Recipes repository on GitHub, or create your own. Creating your own Gaea recipe is easy. The easiest way is to first create a normal graph in Gaea, using one of the primitives that matches your Houdini terrain. For example, a simple Perlin or Range node is useful in most cases. Then add the desired nodes to process the terrain. Once the entire graph is complete, create inputs and outputs as defined below, expose properties you need to modify in Houdini, and save the .tor file. Inputs and Outputs For each heightfield or mask you want to send from Houdini, create a File node. Similarly, set up an Output for each heightmap or color map to be sent back to Houdini. Remember to ensure a unique name for each node's filename variable to avoid crashes or data loss. Exposing variables To expose a node's properties, use Node Properties &gt; Expose Properties. In the dialog that comes up, you can check the properties you want to expose and rename the variable name if needed. For example, when using Erosion, the properties Duration, Strength, Downcutting, and Inhibition are useful and can be exposed.  If multiple variables share the same name - even across different nodes - their values will be overwritten. In such a situation, you should rename the variable name to avoid value contamination. Repeat the process for any other nodes you wish to expose. You can access all exposed properties from the Node Properties Menu &gt; Show Exposed Properties or press F12. Testing the scene Setting up the Gaea SOP Troubleshooting "},{"id":"/Guide/Bridges/Preparing.html","title":"Preparing TOR files","text":"Creating your own Gaea recipe is easy. The easiest way is to first create a normal graph in Gaea, using one of the primitives that matches your target application's terrain. For example, a simple Perlin or Range node is useful in most cases. Then add the desired nodes to process the terrain. Once the entire graph is complete, create inputs and outputs as defined below, expose properties you need to modify in Houdini, and save the .tor file. You can utilize a single Gaea node such as Erosion, Stacks, Texture, etc or entire graph networks inside your target application. Inputs and Outputs For each heightfield or mask you want to send from the target application, create a File node. Similarly, set up an Output for each heightmap or color map to be sent back to target application. Remember to ensure a unique name for each node's filename variable to avoid crashes or data loss. Exposing variables To expose a node's properties, use Node Properties &gt; Expose Properties. In the dialog that comes up, you can check the properties you want to expose and rename the variable name if needed. For example, when using Erosion, the properties Duration, Strength, Downcutting, and Inhibition are useful and can be exposed.  If multiple variables share the same name - even across different nodes - their values will be overwritten. In such a situation, you should rename the variable name to avoid value contamination. Repeat the process for any other nodes you wish to expose. You can access all exposed properties from the Node Properties Menu &gt; Show Exposed Properties or press F12. Maintain Scale To ensure both input and output data retains the same level of fidelity, we strongly encourage using a 32-bit format for heightmaps. Pick the right scale option in the Build Manager settings that fits with your application's workflow. See Terrain Scale for details. For maximum flexibility, we recommend sending data in a normalized range appropriate to the format. In Gaea's File node should use the Use Full Range option to normalize the incoming data unless the data is already normalized. Select Normalized the output range in the Build Manager as well. When you receive the data in your application after the build, you must process it as appropriate. "},{"id":"/Guide/Developers/Automation.html","title":"Automating Gaea","text":" Professional or Enterprise edition required to take advantage of automation features and bridges to 3rd party applications. Automation Automation is a great way to use Gaea as a semi-external engine, whether to utilize Gaea's erosion or other nodes in another application, or generate terrain variations. Exposing Properties The first step to automation is to expose properties that you wish to modify from the command line. To expose a node's properties, use Node Properties &gt; Expose Properties. In the dialog that comes up, you can check the properties you want to expose and rename the variable name if needed.  If multiple variables share the same name - even across different nodes - their values will be overwritten. In such a situation, you should rename the variable name to avoid value contamination. Repeat the process for any other nodes you wish to expose. You can access all exposed properties from the Node Properties Menu &gt; Show Exposed Properties or press F12.  To process external files and also retrieve the output in an automation scenario, create a File node for each incoming heightmap, and an Output for each heigthmap or color map to be saved. Remember to ensure a unique name for each node's filename variable to avoid crashes or data loss. Command Line To modify any variables, use the following command line format: variablename:value. All variables must be appended to the command line after any switches such as --open or --savetor. For additional details on command line usage beyond automation, see Build Swarm. Here is a full command line example: &quot;C:\\Program Files\\QuadSpinner\\Gaea\\Gaea.Build.exe&quot; &quot;C:\\Users\\Username\\Documents\\Gaea\\erosion_automata.tor&quot;   --silent --resolution0512   filein:&quot;Z:\\input.png&quot;   fileout:&quot;Z:\\output.png&quot;   duration:0.518   rocksoftness:0.271   strength:0.184   inhibition:1.0   baselevel:0.0   realscale:true   featurescale:2000   aggressivemode:true  seed:0   Use the command line review button in the Build Manager to copy the command line based on the settings selected in the Build Manager dialog. XML Variable Map Gaea provides the facility to create an XML mapping file containing the details of all the variables exposed, their type, variable name, friendly name, value limits, and default value. To produce this XML map, pass the --nodemap switch to the Build Swarm. Gaea.Build.exe &quot;C:\\Gaea\\erosion_automata.tor&quot; --nodemap Here is an example of such a node map. &lt;?xml version=&quot;1.0&quot;?&gt; &lt;Exposed&gt; &lt;Parameter Name=&quot;File&quot;   Type=&quot;in&quot;   Variable=&quot;fileInput&quot;   Default=&quot;&quot; /&gt;  &lt;Parameter Name=&quot;Output&quot;   Type=&quot;out&quot;   Variable=&quot;fileOutput&quot;   Default=&quot;&quot; /&gt;  &lt;Parameter Name=&quot;Duration&quot;   Type=&quot;double&quot;   Variable=&quot;duration&quot;   Min=&quot;0.001&quot;   Max=&quot;1&quot;   Default=&quot;0.15&quot; /&gt;  &lt;Parameter Name=&quot;Strength&quot;   Type=&quot;double&quot;   Variable=&quot;strength&quot;   Min=&quot;0&quot;   Max=&quot;1&quot;   Default=&quot;0.25&quot; /&gt;  &lt;Parameter Name=&quot;Talus Settling&quot;   Type=&quot;double&quot;   Variable=&quot;talussettling&quot;   Min=&quot;0&quot;   Max=&quot;1&quot;   Default=&quot;0.15&quot; /&gt;  &lt;Parameter Name=&quot;Fine Detail&quot;   Type=&quot;bool&quot;   Variable=&quot;finedetail&quot;   Default=&quot;True&quot; /&gt;  &lt;Parameter Name=&quot;Real Scale&quot;   Type=&quot;bool&quot;   Variable=&quot;realscale&quot;   Default=&quot;True&quot; /&gt;   &lt;Parameter Name=&quot;Verticality&quot;   Type=&quot;int&quot;   Variable=&quot;verticality&quot;   Min=&quot;50&quot;   Max=&quot;20000&quot;   Default=&quot;3200&quot; /&gt; &lt;/Exposed&gt;  The Houdini bridge uses the node map to construct the UI for the Gaea node. "},{"id":"/Guide/Developers/Create-Bridge.html","title":"Create a Bridge","text":"A Bridge between Gaea and your application Gaea can be used as a silent processor from other applications from the command line.  The end-user must have a Professional or Enterprise edition of Gaea. Core Concept The Bridge can be created using any programming language, as long as you meet the following requirements: Invoke command lines and wait for process to exit Read XML file Save as PNG (16-bit), TIFF (32-bit), or OpenEXR (32-bit) Redirect and read StdOut stream (optional)  Gaea must be installed along with prerequisites (see Installing Gaea) for the process to work. The Gaea Bridge workflow consists of the following steps: App invokes --nodemap to get an XML map of available settings in the recipe file. App configures its UI according to the XML map. App saves the input heightfield(s) as files. App invokes Gaea.Build.exe while passing automation variable values as arguments including input and output paths. App optionally redirects StdOut stream to read and display status messages. When the process exits, App will read the files saved by Gaea in the output path. To create a recipe file, follow the instructions in Preparing TOR files.  In the future, file based data transfer will be replaced with shared memory buffers for faster data transmission. At that point, you will be able to send and receive data directly as arrays of 32-bit floats. Configuring the Interface Gaea provides the facility to create an XML mapping file containing the details of all the variables exposed, their type, variable name, friendly name, value limits, and default value. To produce this XML map, pass the --nodemap switch. The .xml node map file will be created in the same folder as the .tor file being passed to Gaea.Build.exe. Gaea.Build.exe &quot;C:\\Gaea\\erosion_automata.tor&quot; --nodemap Here is an example of such a node map. &lt;?xml version=&quot;1.0&quot;?&gt; &lt;Exposed&gt; &lt;Parameter Name=&quot;File&quot;   Type=&quot;in&quot;   Variable=&quot;fileInput&quot;   Default=&quot;&quot; /&gt;  &lt;Parameter Name=&quot;Output&quot;   Type=&quot;out&quot;   Variable=&quot;fileOutput&quot;   Default=&quot;&quot; /&gt;  &lt;Parameter Name=&quot;Duration&quot;   Type=&quot;double&quot;   Variable=&quot;duration&quot;   Min=&quot;0.001&quot;   Max=&quot;1&quot;   Default=&quot;0.15&quot; /&gt;  &lt;Parameter Name=&quot;Fine Detail&quot;   Type=&quot;bool&quot;   Variable=&quot;finedetail&quot;   Default=&quot;True&quot; /&gt;  &lt;Parameter Name=&quot;Verticality&quot;   Type=&quot;int&quot;   Variable=&quot;verticality&quot;   Min=&quot;50&quot;   Max=&quot;20000&quot;   Default=&quot;3200&quot; /&gt; &lt;/Exposed&gt;  Your application should use the XML map to configure the UI for the bridge and present those options to the user.  Property  Description   --------  -----------------------------------------------------------------------------------------------------------------------------------------------------------------   Name  User-facing name of this setting. This can be used to construct the settings UI on your end.  Type  Data type. The options are int, double, bool, choice, in, and out. The last two are of string type, and used for specifying input and output paths.   Variable  The name of variable to be used in the command line when passing values.  Choices Comma separated list of choices for choice type. This is used for creating dropdown lists with choices.   Min The minimum accepted value for this setting. Only available for int, double, and choice.  Max The maximum accepted value for this setting. Only available for int, double, and choice.  Default The default value for this setting. Useful for resetting controls. Invoking Gaea.Build.exe When you wish to process the heightfield, save it to one of the formats specified above. Also decide on where you want Gaea to save the output so you can read from those files once finished. Once the files are saved and the paths are prepared, create a command line string you can pass as arguments. To modify any variables, use the following command line format: variablename:value. All variables must be appended to the command line after any switches such as --open or --savetor. Here is a full command line example for the above nodemap: Gaea.Build.exe &quot;C:\\erosion_automata.tor&quot; --automata --resolution0512   fileInput:&quot;Z:\\input.png&quot; fileOutput:&quot;Z:\\output.png&quot;   duration:0.518 finedetail:true verticality:2000 Unless using specific fixed workflows, it is recommended that the --resolutionXXXX argument be passed so Gaea forces the build at the desired resolution. See Build Swarm for the complete list of accepted command line arguments and switches. Reading StdOut When Gaea.Build.exe is executed, you can redirect its Standard Output to read status messages during the build process. You can use these messages to display progress or messages to your end-user. Sample messages: Property [name] set to [value]. Invalid value for property [name]. Property [name] not found. Building [current] / [total]... &gt; Building [node] / [percent]... When a single node requires a long time to build, the progress of that node will be sent with the &gt; prefix. You can use this to either hide such messages from your end users, or use it display a specific progress message. Each individual message will be delimited by a line break character. In most environments, this will be \ . Maintain Scale To ensure both input and output data retains the same level of fidelity, we strongly encourage using a 32-bit format for heightmaps. See Terrain Scale for details on how Gaea handles scale. Raw Data In most cases, you will want to use Raw Data which is the default option in the Build Manager. This will bring the data within the 0..1 as exported from your application. The scale will be maintained through Gaea's processing and the output will preserve this range. Any File nodes used should NOT use the Use Full Range option otherwise incoming data would become normalized. Normalized Data If you prefer to receive normalized data, select the Normalized option in the Build Manager. Any File node should also use the Use Full Range option to normalize the incoming data unless the data is already normalized. When you receive the data in your application after the build, you must process it as appropriate. Locating Gaea To initiate a command line build, you must first find the location of Gaea's installation. Query the following registry key for Gaea installation and configuration details: HKEY_CURRENT_USER\\SOFTWARE\\QuadSpinner\\Gaea\\1.0  Value  Description  Example  ---------  ---------------------  ------------------------------------   (Default)  Installation Location  C:\\Program Files\\QuadSpinner\\Gaea\\   Version  Installed Version  1.2.0.0 "},{"id":"/Guide/Developers/API.html","title":"Extensibility API","text":"Gaea Extensibility API The Gaea API provides a lightweight framework for users and vendors to extend Gaea with new nodes, custom functionality, and automation. High Level Components The API is divided into three high level components: Nodes: Create your own nodes using C# and C++. Application Plugins: Subscribe to Gaea events and introduce your own code using callbacks in C#. Styles: Create UI modifications, or your own styles for the interface. These components will be available in Gaea 2.0. Build Requirements Visual Studio 2017 or later .NET Framework 4.7.2 or higher Plugins can be written using C# or C++. For C++, you must use C++/CLI for the plugin, but may use pure C++ for internal processing if you want to focus on pure performance. "},{"id":"/Guide/Troubleshoot/Using%20Watson.html","title":"Using Watson for Troubleshooting","text":"Watson Diagnostics Tool Gaea ships with Watson.exe, an advanced diagnostics tool that examines your Gaea installation as well as your general hardware configuration, and allows you to log issues with our Technical Support department without opening a web browser. Watson's goal is to identify and collect small bits of information that may not be readily apparent to the user, or may not be visible without a bit of digging. For example, a small setting in the Preferences may be causing an issue. Watson can identify patterns based on the existing application logs and certain settings, or collect crash logs from recent incidents. These logs help us understand your Gaea installation, your hardware and relevant drivers, and other similar information. This reduces the need for us to ask you questions and get you solutions to problems at a much quicker pace. <figure> <img src=\"/images/ui/Watson1.png\" /> <figcaption> Before starting, you can enable additional optional diagnostic tests. </figcaption> </figure> Starting Watson When you start Watson, available through the Start Menu in the QuadSpinner Gaea program group, you can choose to run optional tests. In most situations, these additional tests are not necessary and can be safely skipped unless instructed by a support technician. <figure> <img src=\"/images/ui/Watson2.png\" /> <figcaption> It usually takes between a few seconds to a couple of minutes to run the tests. </figcaption> </figure> The Diagnostics Process The diagnostics collection process is fairly quick. Watson will collect the data in plain, human readable formats. If enabled in the previous step, the optional diagnostics will include a detailed scan of the Windows Event Log for any additional data on Gaea and Archon crashes. Before running tests, a benchmark build is run using all nodes available in Gaea. This helps diagnose issues in specific nodes. This test can be somewhat slow as 90+ nodes will be built at 1024 resolution. <figure> <img src=\"/images/ui/Watson3.png\" /> <figcaption> Once the diagnostics are collected, you can enter comments and steps to recreate the issue. </figcaption> </figure> Comments and Attachments Before submitting the ticket, you can enter any comments you might have or explain how to recreate an issue you might be facing. Please be as detailed as possible. You can also attach a .TOR/.TORX file if you would like us to examine it.  Please make sure you enter your email address and details on the nature of the problem, and if possible, steps to recreate the situation. While the logs tell us what might have gone wrong, it is impossible to diagnose the issue without some context. Blank tickets will be automatically flagged and disposed by our prioritization system. If you wish to examine the contents of the report, or even modify the zip file that is submitted, you can choose to create just the zip file and not file it automatically. The file will then be saved to your desktop, which you can then examine and alter if you wish to remove any specific data. While this is not recommended, we respect your right to privacy and give you the full freedom to control what data is sent to our technical support team. <figure> <img src=\"/images/ui/Watson4.png\" /> <figcaption> After submitting the issue, you will be assigned a ticket number. </figcaption> </figure> Support tickets, especially those involving issues with the software, can often be expedited when a Watson log is attached. Your privacy Any support logs submitted are usually discarded within 4-6 weeks of closing the ticket. We may retain some of the logs for a longer period in certain situations. For example, if the issue relates to an on-going bug hunt or development task. If you submit a .TOR file, we hold it in utmost confidence and discard it along with the log as outlined above. If we retain the logs, we will still permanently delete the .TOR files. "},{"id":"/Guide/Troubleshoot/common-issues.html","title":"Common Issues","text":"See Knowledge Base for common issues and workarounds, as well scenario specific information. "},{"id":"/Reference/Primitives/Constant.html","title":"Constant","text":"Constant creates a blank terrain of the height specified, or a flat color output. "},{"id":"/Reference/Primitives/Cracks.html","title":"Cracks","text":"The Cracks primitive creates large, cracked patterns on a flat base. You can use it to mask other nodes or subtract it from other primitives using the Combine node. "},{"id":"/Reference/Primitives/Crater.html","title":"Crater","text":"The Crater primitive creates different types of crater shapes. Like all primitives, it is not meant to be the finished product, but rather a starting point from which to develop your own detailed shape. Craters can be either volcanic, which start at the base and go up in a conical shape; or they can be impact, where the inside of the crater can be deeper than the base or the ground around the crater. <figure> <figcaption>Impact Crater: The base is higher than the \"ground\" as the impact crater goes below the surface.</figcaption> </figure> <figure> <figcaption>Volcanic Crater: The base is a flat area and easier to combine with existing terrains.</figcaption> </figure> "},{"id":"/Reference/Primitives/Draw.html","title":"Draw","text":"The Draw node lets you draw entire mountain ranges in the shape you choose. To draw a mountain range of any shape, simply open the Guide Editor using the Edit Guides button in the Properties panel. Choose your brush settings (additive/subtractive and brush size) and draw the shape of your choice. Click the Update button to update the generated shape, or lock to auto-update to update automatically on every stroke. The Draw node excels at creating larger shapes, but the algorithm handles the smaller details. It is recommended that smaller details be processed after the fact using other nodes. Attaching any heightfield to the Input port of the Draw node lets you see it under your Guide Editor surface. This is very useful when drawing mountains on the shapes generated by the Island node. "},{"id":"/Reference/Primitives/Dunes.html","title":"Dunes","text":"The Dunes node allows you to create a large sea of dunes in systematic undulation. Or you can create smaller cropped sections of a large sand dune with lots of small variations and details. Sediment or Alluvium nodes are great for adding further detail to the dunes. <figure> <figcaption>Dune Sea: A uniform set of Dunes covering a large area.</figcaption> </figure> <figure> <figcaption>Chaotic: A windswept, unruly portion of a sand dune covering a smaller area.</figcaption> </figure> "},{"id":"/Reference/Primitives/Fault.html","title":"Fault","text":"The Fault primitive creates a fault in the terrain. The shape can be anything from a crack to a valley, based on the settings. When the Fault node is used by itself, it will create a fault in a flat terrain. To produce a fault in your existing terrain, attach it to another node.  To create a &quot;multi-fault&quot;: duplicate a Fault node, attach it to the original Fault node, and change a few settings. For example - changing the depth, width, or even the seed can produce interesting results. "},{"id":"/Reference/Primitives/File.html","title":"File","text":"The File node loads any supported image or data file as a terrain. It supports all major file formats. You can also transform the input. "},{"id":"/Reference/Primitives/Gradient.html","title":"Gradient","text":"The Gradient node is a very useful starting primitive, especially when displaced or modified to create randomness. It is also a very useful mask generator. This primitive creates three distinct types of gradients: Linear, Radial, and Helix. Several properties shown below are unique to each gradient type. "},{"id":"/Reference/Primitives/Igneous.html","title":"Igneous","text":"The Igneous node creates a semi-complete sandstone terrain, featuring multiple plates crashing into each other to make large, angled rock formations. This can be used for large-scale desert scenes, or even as a &quot;floor&quot; for hero mountains when combined. "},{"id":"/Reference/Primitives/Island.html","title":"Island","text":"The Island node lets you draw basic shapes from which entire landmasses can be generated. To draw an Island, open the Editor from the Properties panel and draw your basic island shape. It is best to create coarse, less-defined shapes and let the algorithm generate the details for you. Once the general shape is ready, you can then use smaller brush sizes in both add and subtract modes to refine the coastlines. {.tip} When refining the shape, keep your eye on the underlying generated shape instead of on your drawing. This will help you follow what changes. "},{"id":"/Reference/Primitives/LineNoise.html","title":"LineNoise","text":"LineNoise is a geometry generator that creates sets of lines which can be distorted and used with other noises and fractals to produce layered ridges.  The Auto Level, Log, and Equalize post-process options can be very useful for managing the noise values. "},{"id":"/Reference/Primitives/Mountain.html","title":"Mountain","text":"Mountain is one of the most versatile primitives in Gaea. It uses a modulated Voronoi pattern and distortions to create realistic mountain shapes, ready for further modification and erosion.  For simple results, such as distant mountains that don't require much detail, you can create a Mountain primitive with a scale of your choice and add the Erosion node. This is the easiest way to create a lot of simple assets. "},{"id":"/Reference/Primitives/Perlin.html","title":"Perlin","text":"Perlin is the most basic and essential noise. In Gaea, we've made a &quot;geo-variant&quot; by modifying the base Perlin shape to fit the needs of terrain design from the beginning. "},{"id":"/Reference/Primitives/Plates.html","title":"Plates","text":"Plates is a new primitive, based on a Perlin core with flat plate-like formations created in between larger Perlin-esque shapes. The flat, slanting areas can make great slopes — especially when combined with Displace nodes. "},{"id":"/Reference/Primitives/Range.html","title":"Range","text":"Range does for mountain ranges what Mountain does for hero mountains. The Range primitive quickly sets up an entire mountain terrain with shapes highly optimized for eroding large scale landscapes. Range comes in two flavors: High Altitude, which generates taller mountains with little to no ground area; and With Base, which creates more rugged but expansive areas nearly 4x the size of High Altitude. The latter is very useful for heavy erosion to create vast mountainscapes. The former is better suited for being &quot;up in the mountains&quot;. The With Base option may not look much, but it can produce beautiful results when processed with Erosion. <figure> <figcaption>High Altitude: A closer 'crop' of a mountainous area at higher altitudes. This includes the larger slopes and peaks, but not the base of the mountain.</figcaption> </figure> <figure> <figcaption>With Base: A wider 'crop' of a mountain chain showing multiple peaks and the valleys and fields between them.</figcaption> </figure>  Range (in both forms) is best eroded with two Erosion nodes. One that erodes the entire environment lightly with no downcutting, and another that applies erosion with medium downcutting but is Biased to the top 20-30% of the altitude in the Selective Processing options. "},{"id":"/Reference/Primitives/Resource.html","title":"Resource","text":"The Resource node allows you to access any resource added to the project's Resource Manager. If you are relying on an external library of files, it may be useful to add them to the @resource-manager and access them through the Resource node.  Adding too large or too many resources to the project may slow down the project and create a large save size for the .tor.resources addon file. We recommend using it sparingly, and removing resources when they are no longer needed. "},{"id":"/Reference/Primitives/SlopeNoise.html","title":"SlopeNoise","text":"SlopeNoise is a unique primitive specifically for creating expansive sloping terrains. SlopeNoise's internal noise distortions create a shape that is very conducive to strong, flowing erosion. SlopeNoise is fantastic for medium range or close-up scenes, where you want to dramatically show the scale and height of the slope. "},{"id":"/Reference/Primitives/Voronoi+.html","title":"Voronoi+","text":"A more flexible version of Voronoi based on clustering that can be useful for advanced scenarios. While the Voronoi node uses a fixed set of points to generate the pattern, Voronoi+ uses randomized points that you can control. "},{"id":"/Reference/Primitives/Voronoi.html","title":"Voronoi","text":"Voronoi is a staple of procedural design. It creates sharp, geometric patterns. The version in Gaea, however, is a &quot;geo-variant&quot;. We have modified the base Voronoi shape to fit the needs of terrain design from the beginning. "},{"id":"/Reference/Adjustments/Abs.html","title":"Abs","text":"The Abs node lets you modify the terrain or mask by eliminating values that are either higher or lower than the exact value specified. "},{"id":"/Reference/Adjustments/AutoLevel.html","title":"AutoLevel","text":"AutoLevel is a composite leveling node that allows you to level your terrain using one or more methods. This node can be useful when you want to stretch your terrain vertically or emphasize certain types of heights. It can also be very useful when working with masks; such as Flow output from the Erosion node, or any other 2D mask that may look too faint. By default, AutoLevel automatically stretches the heights of the terrain between 0 to 100% height while maintaing the proportions. All leveling modes provide a strength slider to manage the amount of modification.  AutoLevel is recommended over Equalize in most situations. The latter may make terrains look too bulky and remove delicate features in some cases. "},{"id":"/Reference/Adjustments/BiasGain.html","title":"BiasGain","text":"Bias-Gain, or more commonly seen in image editing as Brightness-Contrast, is a basic adjustment used to control a terrain's height and shape. "},{"id":"/Reference/Adjustments/Blur.html","title":"Blur","text":"The Blur node diffuses sharp shapes and softens the terrain. "},{"id":"/Reference/Adjustments/Clamp.html","title":"Clamp","text":"Clamp allows you to control the height of the terrain. You can use it to squash the terrain, clip it at certain heights, or make it taller using the Extend operation. "},{"id":"/Reference/Adjustments/Combine.html","title":"Combine","text":"The Combine node is one of the most important nodes in Gaea. It allows you to take two terrains (or any node output) and combine them using various mathematical operations, often known as 'Blend Modes'. In addition, the Combine node also gives you a separation mask for texturing purposes. This is an example of equally blending (Mode: Blend, Ratio: 50%) Perlin and Mountain nodes. If you switch the mode to Max and Ratio to 100%: If you plug in a shape of any kind to the Mask input of the Combine node, the brighter parts of the mask will be replaced with the first input, while darker areas will be replaced with the second input. If your mask is soft (ie - lots of grays instead of just black and white) then the blending between the two will be soft. This is usually the preferred method. "},{"id":"/Reference/Adjustments/Denoise.html","title":"Denoise","text":"Denoise is a general purpose noise removal filter. Denoise systematically cleans up random noise, spikes, and extremely sharp edges. A single iteration is appropriate in most cases. For extremely noisy terrains that require several passes, it is recommended that the desired area be masked to protect the rest of the terrain from losing important details. "},{"id":"/Reference/Adjustments/Displace.html","title":"Displace","text":"The Displace node distorts the input terrain using either built-in noises, or a custom input that you can provide. Displacement is a very useful way of adding perturbances and natural looking imperfections to terrains.  If you need a bit of roughness on the terrain without altering the general shape, use Vertical displacement with lower scale and higher complexity. "},{"id":"/Reference/Adjustments/Flip.html","title":"Flip","text":"The Flip node flips the terrain horizontally, vertically, or both. It can also invert the X-Y ordering of the individual pixels. "},{"id":"/Reference/Adjustments/Gamma.html","title":"Gamma","text":"The Gamma node applies Gamma adjustment to the heightfield. It works exactly as Gamma works in an image processing program. "},{"id":"/Reference/Adjustments/Heal.html","title":"Heal","text":"The Heal node can reconstruct damaged, low res, or 8-bit data with 16-bit, high resolution fidelity. The Heal node can take quantized images with extreme banding of any shape, and clean up the terrain into a naturalistic output. Heal can consume 8-bit data, (visually) damaged images, or low quality satellite data — even with bad JPEG artifacts — and turn it into a reasonably clean heightfield. It is also useful for upscaling lower resolution data such as Google map extracts.  Obviously, not all data can be reconstructed, but you can get a fair bit of quality back. Below is an example where we downsample a 16-bit heightfield to 8-bit, and then reconstruct it using the Heal node. // TODO: Image "},{"id":"/Reference/Adjustments/Invert.html","title":"Invert","text":"Invert node inverts the incoming heightmap. "},{"id":"/Reference/Adjustments/Shaper.html","title":"Shaper","text":"The Shaper node can bulk up, or bulk down, a terrain. Shaper is mainly created to add more &quot;body&quot; to landscape before eroding to avoid a 人 look after eroding. Usually, if you erode a Λ shape, you get 人 shape. If you apply Shaper, the pre-erosion shape becomes a ∩ shape, and after eroding it will be Λ, retaining the bulk in higher altitudes. "},{"id":"/Reference/Adjustments/Sharpen.html","title":"Sharpen","text":"Sharpen enhances the edges and small structures of a terrain by making them more prominent.  Use sparingly. High values can create sharp artifacts on your terrain which may cause issues on playable terrains in games, as well as artifacts in LOD generation. "},{"id":"/Reference/Adjustments/Sine.html","title":"Sine","text":"Sine remodulates the terrain noise in a single sine or &quot;reflectance&quot; wave, giving you fine control.  Sine can be great for getting variations from Perlin noises, when you want a slightly unrecognizable or different noise. "},{"id":"/Reference/Adjustments/Threshold.html","title":"Threshold","text":"The Threshold node lets you alter the terrain based on the height limit specified. It can especially useful when converting a soft mask to a hard mask. "},{"id":"/Reference/Adjustments/Transform.html","title":"Transform","text":"Transform allows you to move, rotate, and scale any terrain. The Transform node can be implemented at any point in your graph as it is a post-process effect.  If your terrain has a hard edge, try using the Zero Borders node before applying the Transform node. "},{"id":"/Reference/Adjustments/Warp.html","title":"Warp","text":"Warp is a more powerful version of Displace. It can take the terrain and &quot;warp&quot; the shape creating more organic shapes. In terrains it can help create more believable shapes or alter simple shapes into a more complex formation. In masks, it can help create breakups that can make a linear mask more random and chaotic without losing its general shape. Unlike Displace, Warp uses a more complex algorithm while being significantly faster. (Up 60x in many situations) By using vector fields, the warping created by this node result in more comprehensive shapes without creating directional tearing or over-stretching the original shape. Warp is also built into the Post Process Stack for easy access. "},{"id":"/Reference/Adjustments/Zero%20Borders.html","title":"Zero Borders","text":"The Zero Borders node allows you to softly transition the edges of a terrain into nothing. It is similar to a vignette effect in paint applications. This node is particularly useful when using Bomber or other effects where the tall edge would be problematic. "},{"id":"/Reference/Filters/Aperture.html","title":"Aperture","text":"The Aperture node expands or compacts every single feature on the terrain, similar to bokeh in a camera. "},{"id":"/Reference/Filters/Apex.html","title":"Apex","text":"Apex uses Euclidean distancing (the same function used to create the Voronoi pattern) to take any heightfield and turn it into a stark, pyramid-like mountain chain. It requires a terrain with a large difference between the highest and lowest points. "},{"id":"/Reference/Filters/Bomber.html","title":"Bomber","text":"The Bomber node takes an input heightfield and &quot;stamps&quot; or bombs it across the entire surface of the terrain using the randomization properties you set. If your terrain has a hard edge, try using the Zero Borders or Clamp in Clip mode before applying the Bomber node. "},{"id":"/Reference/Filters/Cells.html","title":"Cells","text":"This node quantizes the heightfield into discrete cells, defined by the Distance function. The default Euclidian function creates basalt pillar-like shapes. "},{"id":"/Reference/Filters/FractalTerraces.html","title":"Cells","text":""},{"id":"/Reference/Filters/Noise.html","title":"Noise","text":"Applies controlled single-pixel noise onto your terrain. This is a resolution-dependent node. "},{"id":"/Reference/Filters/Origami.html","title":"Origami","text":"The Origami node creates a diagonal multi-fold pattern. It can be used to create a highly stylized terrain. When applied with specific masking, and then processed further with Erosion, the folded structure can produce beautiful, naturalistic results. "},{"id":"/Reference/Filters/Polar.html","title":"Polar","text":"The Polar node creates a kaleidoscope-like effect on a terrain. It can be very useful for creating a distortion that can be merged with the original terrain, or used by itself for a surreal output. "},{"id":"/Reference/Filters/Recurve.html","title":"Recurve","text":"Recurve is a curvature-based expander node. It can inflate and/or deflate the terrain to create stronger slopes and larger, softer formations from a given noise or terrain.  Despite appearances, Recurve's output is very sensitive to subtle changes in the source heightfield. For example, if prior to Recurve you apply MicroErosion or Breaker, then Recurve will create a very specific flow pattern on those grooves and valleys. "},{"id":"/Reference/Filters/Repulse.html","title":"Repulse","text":"The Repulse node can push or pull the center of the terrain, creating an explosion or implosion type outward distortion. "},{"id":"/Reference/Filters/Rocks.html","title":"Rocks","text":"The Rocks node spreads the terrain into randomized pixels creating rough edges. "},{"id":"/Reference/Filters/Subterrace.html","title":"Subterrace","text":"Subterrace creates overlapping terraces with large, rounded corners and gentle slopes. It works great by itself, or when combined with Stratify.  At high values, Subterrace may take a while to build. "},{"id":"/Reference/Filters/Swirl.html","title":"Swirl","text":"Swirl creates a vortex warp on the terrain. It can be very useful for adding a fluid look to the terrain. "},{"id":"/Reference/Filters/Terrace.html","title":"Terrace","text":"The Terrace node lets you modulate the terracing process by attaching a second, optional input.  Try using two Terrace nodes: one with fewer terraces and lower uniformity, and another with several terraces and higher uniformity. The combined output can be tweaked using the Soft Falloff and Intensity settings to avoid over processing. "},{"id":"/Reference/Filters/Whorl.html","title":"Whorl","text":"Whorl applies multiple vortex-like distortions across the terrain to create large scale warping. This can be very useful when creating massive landscapes and wanting to avoid a patterning in the noise, or for creating slightly surreal or alien landscapes.  Whorl can be overpowering if used by itself. An effective way to tone down Whorl is to lower the Influence value in Post Process Stack or use one of the blend modes. "},{"id":"/Reference/Erosion/Alluvium.html","title":"Alluvium","text":"The Alluvium node creates soil deposits across the terrain, either for filling crevices, or for creating large deposits that could cover large geological features. "},{"id":"/Reference/Erosion/Breaker.html","title":"Breaker","text":"Breaker creates large cracks in the terrain, following the general rules of Hydraulic Erosion, but without creating soil deposits. "},{"id":"/Reference/Erosion/Buildup.html","title":"Buildup","text":"Buildup is an inverse form of erosion. Instead of taking sediments away, like the drag of Hydraulic erosion, Buildup adds crusting to convex edges of the terrain. All erosion features found in terrain design software focus almost exclusively on carving the terrain, which eventually results in a predictable model. Buildup conversely regenerates some of the lost mass, filling up the excessively carved and convex areas. This is quite useful for simulating ancient landscapes. "},{"id":"/Reference/Erosion/Convector.html","title":"Convector","text":"Convector is an exaggerated form of thermal erosion with a few tweaks for stylized output. Convector creates strong slopes and terraces at the same time, offering a unique flavor of erosion. The delicate terracing can be very useful as a base for the Erosion node. As you can see in the second screenshot, these terraces help mimic a big mountain — especially for snow accumulation purposes. // TODO: Image "},{"id":"/Reference/Erosion/Deposits.html","title":"Deposits","text":"The Deposits node is an amped up version of Alluvium. It works similarly to Alluvium's Deposits mode, but processes faster and creates larger soil deposits by sacrificing finer details. It is useful when you need very heavy deposits that Alluvium can't achieve. "},{"id":"/Reference/Erosion/Erosion.html","title":"Erosion","text":"Erosion is the cornerstone of all terrains. It simulates hydraulic erosion on the terrain to turn any shape into a realistic looking terrain. It provides sophisticated erosion with a very easy to use interface. The Erosion node provides control over the scale, where you can choose the size of the largest erosion feature, as well as the overall scale of the terrain. The Erosion node’s algorithm addresses one of the biggest problems in digital erosion: it preserves features across different resolutions. This means that a 512 x 512 preview build will maintain essential parity for all major erosion features with a high resolution 4K or 8K build. You no longer need to guess the output type. The algorithm also creates exquisite flows with naturalistic curves, never before been seen in digital erosion. Strength and Rock Softness Both Strength and Rock softness parameters affect the aggressiveness of erosion, and effect from increasing of one can be similar to the effect of increasing other, but there is still the difference, derived from the definition of these parameters. Lesser strength means dissolved soil will be dropped earlier because of lower water transport capacity, and lesser softness means that the rock will be eroded slower but dissolved sediment will be dropped farther. This results in different distribution of deposits, gullies, and shapes of erosion features. <figure> <figcaption>Low Strength with very high Rock Softness retains the general shape. Fewer cracks or fluvial grooves are created, while some soft sediment is accumulated on slopes.</figcaption> </figure> <figure> <figcaption>High Strength with very low Rock Softness creates a heavily eroded terrain with plenty of soft sediment.</figcaption> </figure> Downcutting Downcutting effectively transports sediment far away from its origin. If shorter transport distance is desired, for example, for faster alternating between erosion/deposition, set this parameter to 0.0, or set Inhibition to higher values. <figure> <figcaption>High downcutting with medium Inhibition creates lots of deep fluvial grooves, as well as excess sediments that flow downslope.</figcaption> </figure> <figure> <figcaption>High downcutting with very little or no Inhibition will create the same deep fluvial grooves, but no excess sediments.</figcaption> </figure> Scale and Feature Size The size of the &quot;features&quot; created during the erosion process - namely the width of largest valleys and ridges between them - is controlled by the Feature Scale option is where you can achieve artistic control over the erosion process. <figure> <figcaption>Default Feature Size of 2000 (meters).</figcaption> </figure> <figure> <figcaption>Reduced Feature Size of 50 (meters).</figcaption> </figure> The Real Scale option automatically controls the general scale (the extents of the terrain and the vertical scale), using the scale set in the Terrain Definition. Although it can be turned off to manually change the 'physics' of the erosion system, although it is not recommended for most scenarios.  When using Parallel Processing, the erosion algorithm can become non-deterministic. This means while most of the major flows will appear in the same location, smaller features may appear somewhat different every time the node is processed. To ensure fully deterministic processing, disable Parallel Processing. This will sacrifice processing speed to ensure your results are consistent. Selective Processing "},{"id":"/Reference/Erosion/Fluvial.html","title":"Fluvial","text":"Fluvial erosion is a &quot;secondary&quot; erosion. It is most useful when applied on top of an already eroded surface, or when you need light erosion where carving is more important than sedimentation. "},{"id":"/Reference/Erosion/Hydro.html","title":"Hydro","text":"Hydro creates waterflow erosion, such as rivers and ancient seabeds. It can be used in two forms: Lateral and Ventral. Lateral enhances the terrain by providing a different method of eroding rocky river banks, and even underwater areas. Lateral follows the water flow, creating patterns based on the flows over and around obstacles. Ventral uses partially randomized, churning forces to erode the terrain. It works with two sets of forces: macro and micro, which interweave to use the shape of the terrain to drive the erosion. This erosion method uses horizontal flow mechanics (unlike hydraulic erosion), resulting in a look that flowing waters gently carved in the terrain over thousands of year. "},{"id":"/Reference/Erosion/MicroErosion.html","title":"MicroErosion","text":"MicroErosion performs very tiny amounts of erosion in crevices and flow structures created by previous erosion passes. It behaves similarly to a Sharpen pass, but specifically for enhancing erosion structures. "},{"id":"/Reference/Erosion/RockSlide.html","title":"RockSlide","text":"RockSlide creates individual pixel-sized rocks that have slid down from the top. It can be useful for creating rock deposits. "},{"id":"/Reference/Erosion/Sediment.html","title":"Sediment","text":"The Sediment node creates a thick layer of sedimentation on top of the terrain. The sediment is very generic and, based on your usage, can make sand or snow.  The Drift mode creates an extremely large buildup of sedimentation (snow, sand, etc) offset to the main terrain. This can be great for creating snow buildup, glaciers, and more.  If the Drift looks too detached from the main terrain, try changing the Seed or lowering the Strength. "},{"id":"/Reference/Erosion/Stratify.html","title":"Stratify","text":"Stratify allows you to create broken strata or rock layers on the terrain in a non-linear fashion. Unlike terracing, stratification involves substrata/subterraces created in confined local zones, such as between two broken plates. Each stratified layer exists independent from the rest of the layer, creating a robust, realistic formation. "},{"id":"/Reference/Erosion/Thermal.html","title":"Thermal","text":"Thermal simulates Thermal Erosion that can create talus and debris. Thermal Stress Anisotropy Thermal Stress Anisotropy governs how erosion and the resulting rocks deposits are shaped. It smooths the terrain while eroding. Low values keep the original terrain intact for the most part, while high values create stronger talus at the expense of eroding the original terrain. For example, sharp peaks get eroded heavily with high stress values. The image below shows a simplified version of how Thermal Stress Anisotropy affects a terrain. "},{"id":"/Reference/LookDev/Fold.html","title":"Fold","text":"The Fold node simulates terrain folding by introducing slants, breaks, and folds to the terrain. It will change the shape of the terrain significantly and should be used early in the graph. "},{"id":"/Reference/LookDev/Landform.html","title":"Landform","text":"Landform is a shortcut node for transforming a simple shape into a complex landscape. "},{"id":"/Reference/LookDev/Shatter.html","title":"Shatter","text":""},{"id":"/Reference/LookDev/Stacks.html","title":"Stacks","text":""},{"id":"/Reference/LookDev/Surface.html","title":"Surfacer","text":""},{"id":"/Reference/Snow/Glacier.html","title":"Glacier","text":""},{"id":"/Reference/Snow/Iceberg.html","title":"Iceberg","text":""},{"id":"/Reference/Snow/IceFloe.html","title":"IceFloe","text":""},{"id":"/Reference/Snow/Snowfall.html","title":"Snowfall","text":"The Snowfall node simulates snowfall, melting, and settling like in the real world using dedicated snow physics that lets you also control how the snow sticks and flows along the terrain. Settle and Melt Advanced Physics "},{"id":"/Reference/Water/Coast.html","title":"Coast","text":"The Coast node creates a coastal region on the terrain. The coast can be either a smooth transition (beaches) or a strong transition (cliffs). A systematic coast may not always look realistic. Try using a mask to affect certain areas only, or combine multiple Coast nodes with masks. "},{"id":"/Reference/Water/Headwaters.html","title":"Headwaters","text":""},{"id":"/Reference/Water/Lakes.html","title":"Lakes","text":"The Lake node simulates rainfall on the terrain and creates physically accurate lakes. "},{"id":"/Reference/Data%20Maps/Angle.html","title":"Angle","text":"Angle creates a selection mask covering all areas of the heightfield facing the specified range. "},{"id":"/Reference/Data%20Maps/Curvature.html","title":"Curvature","text":"The Curvature node creates a mask where convex areas (such as sharp edges, protrusions, etc.) are selected. It is a very useful layer in texture creation, often as highlights applied on top of an existing texture map. "},{"id":"/Reference/Data%20Maps/Details.html","title":"Details","text":"The Details node allows you to extract higher frequency details to produce Detail Displacement (for lower resolution meshes) or Detail Normals. Just add the node to your final height node(s), and set the Target Size to your downscaled size. For example, if you are building your world at 8192 x 8192, but your mesh is 2048 x 2048 vertices, then set the Target Size to 2048. To create Detail Normals, just do the above and attach a Normal Map node to the Details output.  The Details output is extremely &quot;microscopic&quot; and may not always be directly visible in the viewport. You should temporarily turn on Autolevel (Lv) in the Post Process options, or use the Eq mode in 2D view to look at the output. "},{"id":"/Reference/Data%20Maps/Distribution.html","title":"Distribution","text":"The Distribution node creates a distribution map in the form of white pixels, or &quot;hits&quot;, based on the shape of the terrain. The output can be used as a distribution source map in other applications; such as ForestPack, XGen, Vue, Blender, etc. "},{"id":"/Reference/Data%20Maps/Dither.html","title":"Dither","text":"Dither is one of the few stylized output nodes in Gaea. It takes any heightfield or mask and creates a dithering pattern. This can be useful for creating color maps for large terrain maps. "},{"id":"/Reference/Data%20Maps/Flow.html","title":"Flow","text":"The Flow Map can be used to create flow data at any point in the graph, rather than relying on an Erosion node output. The Flow map simulates rainfall and water accumulation on the terrain.  There are advantages to both Constant Rainfall options. Average rainfall can be used to highlight stronger flow areas, while Constant rainfall can be used to highlight all flow areas. Combining both can be useful for texture creation. "},{"id":"/Reference/Data%20Maps/Growth.html","title":"Growth","text":"Growth simulates vegetation growth based on slope and flows. "},{"id":"/Reference/Data%20Maps/Height.html","title":"Height","text":"The Height node creates a selection mask within the height range specified. "},{"id":"/Reference/Data%20Maps/Mask.html","title":"Mask","text":"The Mask node lets you draw a mask. You create the mask by drawing it in the Mask interface which is launched by the Edit Mask button in the properties panel. TODO: Image For drawing, you have two options: Draw and Erase. The brush size slider lets you change your brush size for either operation. If the Input port is connected to another node, a 2D representation of that terrains is shown in the background as a guide. This is optional, as the Input port only provides a drawing guide and does not affect the actual mask. "},{"id":"/Reference/Data%20Maps/Occlusion.html","title":"Occlusion","text":"The Occlusion node behaves similarly to Ambient Occlusion but favors sedimentary processes rather than lighting. "},{"id":"/Reference/Data%20Maps/Protrusion.html","title":"Protrusion","text":"The Protrusion data map masks out sharper areas that may be used as protruding rocks or strata, and be used as masking element for texturing purposes. The map can be used with other data maps such as Texture or Soil for creating a complex color map. "},{"id":"/Reference/Data%20Maps/RockMap.html","title":"RockMap","text":""},{"id":"/Reference/Data%20Maps/Slope.html","title":"Slope","text":"The Slope node creates a selection mask within the slope range specified. "},{"id":"/Reference/Data%20Maps/Soil.html","title":"Soil","text":"Soil Map creates a soil mask, with increased density in crevices or other areas where the slope allows for soil to settle. By increasing the Power value, a higher number of soil settling cycles are simulated. A low value provides a &quot;fresh&quot; sprinkling of dust with very little wind and other simulations to &quot;move&quot; the dust afterwards. High values perform more simulation cycles to sprinkle dust but also move it around (repeatedly).  You can combine different Soil Maps using the Combine node set to Max. You can even combine with other Data Maps, such as Flow or Velocity, to create a texture mask upon which color production can take place. "},{"id":"/Reference/Data%20Maps/SurfTex.html","title":"SurfTex","text":"Surfacer provides several types of texturing primitives. It should not be used by itself. Instead, multiple Surfacers' output should be combined to create a sophisticated texture mask, and can also be combined with other complex texture masks, such as the Data Maps. "},{"id":"/Reference/Data%20Maps/Texture.html","title":"Texture","text":"The Texture node is a composite node that uses multiple factors such as chaos, slopes, flow zones, and other geological features to create a texture mask that can be fed to any color node to create a texture map. It can be used by itself, or combined with other data maps and selectors. "},{"id":"/Reference/Data%20Maps/Velocity.html","title":"Velocity","text":"The Velocity simulates wide flows by creating rainfall with specific velocity and angles. "},{"id":"/Reference/Color/Biome.html","title":"Biome","text":"Biome uses a water map (like FlowMap or the Erosion node’s Flow output) to create different biome zones based on altitude, access to fresh water (defined by the water map), and other conditions. The output from Biome can be used directly as a basic texture map, or as a &quot;Super Splat&quot;. The colors for each biome zone (such as Desert, Tropical Rainforest, etc) can be customized to your needs. "},{"id":"/Reference/Color/Cartography.html","title":"Cartography","text":""},{"id":"/Reference/Color/CLUTer.html","title":"CLUTer","text":"CLUTer lets you create color gradients which can be mapped to texture masks for creating color maps. Coloration in Gaea is based on CLUTs, or color lookup tables. As 2D heightfields are essentially a grid of numbers ranging from 0.0 (lowest) to 1.0 (highest), CLUTs are represented as gradients which are mapped to those heights. The lowest part of a gradient corresponds to the lowest part of the terrain. The highest part of a gradient corresponds to the highest part of the terrain. Everything in between is evenly distributed. The CLUTer nodes let you take any grayscale input (such as Curvature, Slope, @Surface, @flow) and map it onto a gradient. Gradient Editor Click anywhere in the gradient to create a new stop. Drag the stop to position it. Select the stop and press DEL to delete the stop. CLUTer  You can use Input Clarity instead of interjecting an Autolevels node to the graph. In this example, a Flow is mapped by CLUTer to create basic texture map. CLUTer "},{"id":"/Reference/Color/ColorFx.html","title":"ColorFX","text":"ColorFX contains several color map adjustment tools such as Brightness/Contrast, Hue/Saturation/Lightness, Gamma, Clarity, etc. "},{"id":"/Reference/Color/Light.html","title":"Light","text":""},{"id":"/Reference/Color/Mixer.html","title":"Mixer","text":"The Mixer node is just like the Combine node, but for mixing colors rather than heightfields or masks. The Mixer node is color coded to help differentiate it from the Combine node. "},{"id":"/Reference/Color/NormalMap.html","title":"Normal Map","text":"The Normal Map node creates a normal map from terrains. When used in conjunction with the Details node, it can also create Detail Normals. "},{"id":"/Reference/Color/QuickColor.html","title":"QuickColor","text":"QuickColor lets you quickly map a 2-color gradient to any mask. This can be useful for simple scenarios where CLUTer would be overkill. For example, attaching QuickColor to Snowfall's snow output can create a black and white mask that can be blended with your main color map. "},{"id":"/Reference/Color/RGBMix.html","title":"RGBMix","text":"RGBMix can take 3 different heightfield inputs and encode them to the Red, Green, and Blue channels of a bitmap. It is the counterpart to the RGBSplit node. "},{"id":"/Reference/Color/RGBSplit.html","title":"RGBSplit","text":"RGBSplit can take a color node and split the Red, Green, and Blue channels into heightfields. It is the counterpart to the RGBMix node. "},{"id":"/Reference/Color/SatMaps.html","title":"SatMaps","text":"The SatMap node gives you access to hundreds of CLUT maps which were created from satellite data collected from around the globe. SatMap works exactly like CLUTer, except you pick from the built-in maps rather than make your own. "},{"id":"/Reference/Color/Splat.html","title":"Splat","text":"The Splat node is similar to RGBMix. It can take heightfield nodes and encode them to the RGB channels of a color map. It provides properties for controlling the inputs. "},{"id":"/Reference/Color/Synth.html","title":"Synth","text":"Synth can take a bitmap image whether photo or artwork and convert it to CLUT map that can be used with a texture mask of to colorize your terrain. "},{"id":"/Reference/Color/Vegetation.html","title":"Vegetation","text":"Vegetation takes any color map and &quot;grows&quot; vegetation on it. It allows you to create believable vegetation on a color map without requiring you to pick a color map that has green in it. This gives you more flexibility with your coloring options. "},{"id":"/Reference/Output/Mesher.html","title":"Mesher","text":"Mesher allows you to save specific nodes as meshes instead of heightfields. It can also generate LODs. "},{"id":"/Reference/Output/Output.html","title":"Output","text":"The Output node gives you explicit options for saving a node's output to file. It is an alternative to the Mark for Export option that is available on all nodes. It is specifically useful for saving files to a predefined path and overwriting the output every time.  The output file will be overwritten on each build. Use the Build Manager instead to automatically stack and rename files.  The Output node is for backward compatibility only. We recommend using the Build Manager instead, unless you have specific needs. "},{"id":"/Reference/Logic/Chokepoint.html","title":"Chokepoint","text":"The Chokepoint node is a special node whose sole purpose is to help avoid re-connecting many nodes, while adding no memory overhead. Often a graph ends up with natural chokepoints - a single node that is referenced by several other nodes. If at a later point you want to modify that important node, you would need to reconnect all the connections. This can be awkward, time consuming, and dangerous in some situations. In this example, the second Erosion node is the chokepoint. It feeds several other nodes, while being a critical junction in the terrain's creation process. It is more or less the &quot;last&quot; node in the terrain creation.  The easy solution is to interject a Chokepoint node onto the important node. You can hold Shift while drag-dropping a Chokepoint on to the Erosion node to interject it and have Gaea reroute all connections. See Node Workflow for more information.  Now everything is routed through the Chokepoint, allowing you to experiment with the Erosion node later, and only reroute a single connection when needed. The Chokepoint can be further organized by making its output a portal. You can select all the outgoing connections and press Ctrl + P to turn them into portal connections. This is especially useful when working with multiple graphs.  "},{"id":"/Reference/Logic/Route.html","title":"Route","text":"Route lets you choose the flow of the graph based on the Input and Output ports chosen. This is an automation node that relies on an integer input. "},{"id":"/Reference/Logic/Switch.html","title":"Switch","text":"Route lets you choose between two different heightfield inputs. This is an automation node that relies on a boolean (true/false) input. "},{"id":"/Learning/Tutorials/Intro-Create.html","title":"Introduction to Gaea","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/1A1xXfTlKqM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/Intro-Color.html","title":"Color Production","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/4AFDXxYlQMg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/Hero-Mountain.html","title":"Hero Mountain","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/JAFIuTBYtnM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/WarpDunes.html","title":"Warped Dunes","text":"Working on a short tutorial on how to have rock formations alter the shape of dunes. Will publish it next change I get.  The basic idea is to mix two separate terrains (Dunes and Rock formation) with 100% Max mode in Combine, then use the Separation mask to drive the displacement of the dunes. This tutorial will also cover an important concept I like to call &quot;Intentional Orphans&quot;. This is where nodes are used for something other than their primary output. <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/TwAOWEPD_XM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/Merging-Terrains.html","title":"Merging Terrains","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/AOsGuT9BqiQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/Arctic.html","title":"Arctic Terrain Breakdown","text":"<div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/0_hJ5u98Las\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> "},{"id":"/Learning/Tutorials/Rugged-Outcrops.html","title":"Rugged Rock Outcrops","text":"This handy trick can help you emphasize the sharper portions of your terrain to make it look more rugged. <br> <div class=\"embed-responsive embed-responsive-16by9\"> <iframe class=\"embed-responsive-item\" src=\"https://www.youtube-nocookie.com/embed/c8g4AYPm2XA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> <br> This is what an &quot;extra rugged&quot; terrain looks like. It is created by emphasizing a portion of the rocks generated by the Stacks node.  To start with, we have a Helix Gradient eroded by Erosion.  Then we use the Stacks node to create stratified rock outcrops and a strong talus.  Next we use a Combine node to merge them using Max mode at 100%. This gives us the higher values from both the Erosion and Stacks nodes. An alternative is to just use the Max option in the Post Process Stack.  We use a separate Combine node to merge the same two nodes, but this time us Difference mode. This gives just the portions that are different between the two. Because we max-merged the terrains, there is a lot of overlap so we only get the sharper outcrops that Stacks has created.  Now we use a third Combine node to combine the max-merged output with the diff-merged output. This time we use Screen at 100%, so the sharp portions are intensified by the relative strength from the difference product. The red mask here shows the areas being affected.  And this is our final result.  "},{"id":"/Learning/Techniques/Blending-SatMaps.html","title":"Blending SatMaps","text":"SatMaps can give you a complex color maps to colorize your terrains. However, sometimes a map may look good but be just a little bit off, and you may be tempted to force a color change using ColorFX. While that is an option, it can be problematic as it is a &quot;brute force&quot; solution. An organic, and in many cases - better, method is to blend different SatMaps. Here is an example. This terrain has a believable red hue which is strong, but not too strong.  This is the original SatMap. A portion of the map Rocky 207. However, by itself it is too red.  To make the map look more believable, we create a second SatMap node that uses a cooler hue. In this case, it is the map Blue 107.  When blended using a Combine node at 100% Max mode, you get a little bit of blue poking out through the red pixels. To further make this more realistic, the Combine node is masked with a high noise Perlin.  "},{"id":"/Learning/Techniques/Bombing-Shapes.html","title":"Bombing Shapes","text":""},{"id":"/Learning/Techniques/Cellular-Mountains.html","title":"Cellular Mountains","text":""},{"id":"/Learning/Techniques/Crater-Cave-In.html","title":"Crater Cave-in","text":"In this tutorial, I'm using the new Shaper node to bulk up a crater, and then use slope biased Erosion to create gentle erosion just inside the crater.  First, I created a crater (default settings).  Then mixed it with a random Mountain node from the default scene. This creates a slab of slanted material embedded into the side of the crater. Look at the post processing settings too - I adjusted the height of the Combine output by leveling it up then clamping it down. (I also cheated - I used Max right there instead of changing the main settings, but both would do the same thing in this case).  The Shaper node bulks up the terrain. By disabling detail preservation, the outlying area looks nice and soft. Particularly useful for an alien looking environment. (But exists quite easily on Earth too)  Finally, with the Erosion node, I used Slope Bias in Selective Processing. This targets just steep slopes inside the crater. Because of the smooth bulk-up via Shaper, the outside area is too shallow to be affect by such steep settings. And there you have it - looks like something a space worm crawled out of, then went back in, with the sand collapsing in. Have fun with Shaper. "},{"id":"/Learning/Techniques/Dirty-Snow.html","title":"Dirty Snow","text":"If you need complex snow distribution, it is recommended to chain multiple Snowfall nodes together. Each node contributes a different type of distribution. Let's try it out in a practical scenario. For our demo terrain, we want slightly unkempt snow that is uneven and somewhat &quot;dirty&quot;, rather than large pristine mounds. In our first Snowfall node, we will target general &quot;dirty&quot; distribution. To do this, we use 100% Settle-Thaw and 8% Melt with a high Snow Line of 48%. For ensuring the snow collects in smaller clumps and a bit of rock is exposed in between, we use a somewhat high Slip-off Angle value of 60, and a slightly high Adhered Snow Mass value of 15. This creates a non-flowing distribution, keeping the snow high up in the mountain while still letting its physics simulation work long enough to force the snow into crevices and expose sharp bits of the underlying terrain.  For the second pass, we focus on the flowing snow. While overlap between the first and second pass is fine, we want to ensure as little of it as possible otherwise we lose the &quot;dirtiness&quot; of the snow. We use a low Intensity of 6%, a low Settle-Thaw of 2.5%, and a Melt value of 5%. The Snow Line is a lot lower than the previous pass at 28%. For allowing the snow to flow more effectively, we use a low Slip-off Angle of 14%. This snow is now forced to the flow areas (often defined by previous erosion passes), whereas the previous pass focused on &quot;resting&quot; snow.  Finally, we take the two nodes' secondary Snow output mask and use Combine at 100% Max mode to merge the masks for use in our texture map creation.  "},{"id":"/Learning/Techniques/Draw-Modify.html","title":"Draw to Modify","text":"A hidden gem in Gaea is the Mask node. On the surface it appears to be a simple mask drawing tool, but when used in conjunction with specific node networks, it can give you a powerful creative advantage. In this example, we will use the Mask node to modify the heights and even draw some detail into an existing terrain. To set up our Mask node, we input the terrain for reference so we can see where are drawing. Then a Combine node is set up after it to take the Mask output and blend it into the main terrain in either Add or Screen mode. Finally, we Pin the Combine node so we get a live preview of the result from the drawing. (see Pinning Nodes). In the Mask node editor, click Edit Mask to start drawing. Adjust the Blur and Iterations until you get the right level of softness. More softness means gentler transitions for the main terrain. Remember to use a low Strength setting in the mask editor. If you need both raise and lower capability, you can set up two different masks - one that Subtracts while the other Adds. Or you can choose 50% Strength and paint over the entire mask surface. Switch the Combine node's mode to Multiply and in the Post Process Stack set the Multiply option to 2.0 to compensate for the 50% multiplication. Then when you use positive or negative strokes, they will raise or lower respectively. For added shape randomness, you can use Warp before combining the mask. "},{"id":"/Learning/Techniques/Fake-Water-Flows.html","title":"Fake Water Flows","text":"If you want to create water flows, like you might find at the beach, you can fake them using Erosion.   First, we set up a SlopeNoise and erode it. The Erosion settings of high downcutting values (all 3 sliders) are to promote wider, sandier flows.  Then we create a Perlin with low octaves and clamp it down to a flat-ish state.  Finally, subtract the Wear map from the Perlin. "},{"id":"/Learning/Techniques/Frozen-Lava.html","title":"Frozen Lava","text":""},{"id":"/Learning/Techniques/Hero-Dune.html","title":"Hero Dune","text":""},{"id":"/Learning/Techniques/Merging-Terrains.html","title":"Merging Terrains","text":""},{"id":"/Learning/Techniques/Multipass-Erosion.html","title":"Multipass Erosion","text":"A great way to create sophisticated erosion is to use multiple Erosion nodes. A single erosion pass is fine, but will restrict you because of the settings you can use. In this example, we have Selective Processing set to Altitude with high Duration of 30% for creating the initial pass. The strong grooves/flow structure it creates will guide the erosion in subsequent passes.  For the second pass, we have default settings except for 100% Downcutting and 100% Base Level. This creates strong flow structures everywhere.  The third pass is fully default. It takes the general larger variations created in the previous passes and homogenizes the overall &quot;texture&quot; yet keeps the larger features. Optionally, higher Inhibition can be used to create more sediments at the bottom.  "},{"id":"/Learning/Techniques/Separation-Mask.html","title":"Separation Mask","text":""},{"id":"/Learning/Techniques/Shattered-Floor.html","title":"Shattered Floor","text":"Sometimes you may require an overall flat terrain but with lots of detail. Shatter can help you create that in just 2 steps. Create a Plates node and use the Post Process Stack to Clamp the output to a level of flatness that you like. In this case we have it set to 33 and 24. Next add the Shatter node. And that's it - you're done! You further improve this with other nodes, or use Texture and RockMap with SatMaps to texture the terrain. "},{"id":"/Learning/Techniques/Slanted-Terraces.html","title":"Slanted Terraces","text":"Take any random shape like a Perlin, and add an Apex node.  Switch the Apex node to Slant mode and adjust the A/B settings until you have a shape that looks pleasing to you.  Duplicate the node and attach it to the Apex node. In the second node, change the Angle to 90 degrees.  Add a Displace node to the end to warp the shape a bit.  Experiment with different A/B settings and angles to get different permutations. "},{"id":"/Learning/Techniques/Terrain-Floor.html","title":"Terrain Floor","text":""},{"id":"/Learning/Techniques/Terrain-Folding.html","title":"Terrain Folding without the Fold Node","text":"This is a very simple yet effective method for creating terrain folding without using the Fold node. The basic concept is to use a highly warped noise to cut grooves in Voronoi.  Create a highly warped Perlin.  Use the Perlin to mask a Voronoi (Form P, no Warp, Dual on if you prefer)  Displace with a few iterations for nice long stretches (High Quality off), and then clamp it to get the height down.  Erode with default settings.  The main image is with a bit of snow added, and Texture + Satmaps (both using Navajo Sandstone presets). "},{"id":"/Learning/Techniques/Twisted-Sandstone.html","title":"Twisted Sandstone","text":""},{"id":"/Learning/Techniques/Whorly-Terrains.html","title":"Whorly Terrains","text":""},{"id":"/KB/FAQ/Purchasing.html","title":"Purchasing","text":"Is Gaea subscription based? Do I need to pay a maintenance fee? How do I upgrade my Gaea license to Professional or Enterprise? Can I purchase Gaea with a credit card? Yes. To pay using a credit card, instead of clicking the large &quot;PayPal&quot; button, press one of the card icons of your choice to open a popup window for that payment method. If you are already in the popup window, do not log into your PayPal account. Instead, simply &quot;Continue as a Guest&quot; and you will see which credit cards PayPal accepts. There is a large X on my build! How can I remove that? Can I get a refund for my purchase? "},{"id":"/KB/FAQ/Running.html","title":"Requirements","text":"What are the requirements for running Gaea? What GPU do I need to run Gaea? Do I need an internet connection to use Gaea? Is Gaea GPU powered? Can I use Gaea on a Mac or Linux? Is Gaea standalone or a plugin? When is this particular feature going to be available? "},{"id":"/KB/FAQ/Licensing.html","title":"Licensing","text":"How many computers can I install my Gaea license on? Are Gaea licenses node-locked? I lost my license key. How can I recover it? Where is my license key? Can I share or sell the content I create with Gaea? Are floating licenses available for Gaea? Can I transfer my license to someone else? "}]